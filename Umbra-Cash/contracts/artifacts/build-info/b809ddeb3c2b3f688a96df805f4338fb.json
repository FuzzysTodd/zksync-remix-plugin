{
	"id": "b809ddeb3c2b3f688a96df805f4338fb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"Umbra-Cash/contracts/Umbra.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\";\nimport \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./IUmbraHookReceiver.sol\";\n\ncontract Umbra is Ownable {\n  // =========================================== Events ============================================\n\n  /// @notice Emitted when a payment is sent\n  event Announcement(\n    address indexed receiver, // stealth address\n    uint256 amount, // funds\n    address indexed token, // token address or ETH placeholder\n    bytes32 pkx, // ephemeral public key x coordinate\n    bytes32 ciphertext // encrypted entropy and payload extension\n  );\n\n  /// @notice Emitted when a token is withdrawn\n  event TokenWithdrawal(\n    address indexed receiver, // stealth address\n    address indexed acceptor, // destination of funds\n    uint256 amount, // funds\n    address indexed token // token address\n  );\n\n  // ======================================= State variables =======================================\n\n  /// @dev Placeholder address used to identify transfer of native ETH\n  address internal constant ETH_TOKEN_PLACHOLDER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice An ETH amount that must be sent alongside each payment; used as an anti-spam measure\n  uint256 public toll;\n\n  /// @notice A privileged address, set by the admin, that can sweep all collected ETH tolls\n  address public tollCollector;\n\n  /// @notice The address where ETH funds are sent when collected by the tollCollector\n  address payable public tollReceiver;\n\n  /// @notice Token payments pending withdrawal; stealth address => token address => amount\n  mapping(address => mapping(address => uint256)) public tokenPayments;\n\n  // ======================================= Setup & Admin ========================================\n\n  /**\n   * @param _toll Amount of ETH required per send\n   * @param _tollCollector Address that can sweep collected funds\n   * @param _tollReceiver Address that receives collected funds\n   */\n  constructor(\n    uint256 _toll,\n    address _tollCollector,\n    address payable _tollReceiver\n  ) {\n    toll = _toll;\n    tollCollector = _tollCollector;\n    tollReceiver = _tollReceiver;\n  }\n\n  /**\n   * @notice Admin only function to update the toll\n   * @param _newToll New ETH toll in wei\n   */\n  function setToll(uint256 _newToll) external onlyOwner {\n    toll = _newToll;\n  }\n\n  /**\n   * @notice Admin only function to update the toll collector\n   * @param _newTollCollector New address which has fund sweeping privileges\n   */\n  function setTollCollector(address _newTollCollector) external onlyOwner {\n    tollCollector = _newTollCollector;\n  }\n\n  /**\n   * @notice Admin only function to update the toll receiver\n   * @param _newTollReceiver New address which receives collected funds\n   */\n  function setTollReceiver(address payable _newTollReceiver) external onlyOwner {\n    tollReceiver = _newTollReceiver;\n  }\n\n  /**\n   * @notice Function only the toll collector can call to sweep funds to the toll receiver\n   */\n  function collectTolls() external {\n    require(msg.sender == tollCollector, \"Umbra: Not toll collector\");\n    tollReceiver.transfer(address(this).balance);\n  }\n\n  // ======================================= Send =================================================\n\n  /**\n   * @notice Send and announce ETH payment to a stealth address\n   * @param _receiver Stealth address receiving the payment\n   * @param _tollCommitment Exact toll the sender is paying; should equal contract toll;\n   * the committment is used to prevent frontrunning attacks by the owner;\n   * see https://github.com/ScopeLift/umbra-protocol/issues/54 for more information\n   * @param _pkx X-coordinate of the ephemeral public key used to encrypt the payload\n   * @param _ciphertext Encrypted entropy (used to generated the stealth address) and payload extension\n   */\n  function sendEth(\n    address payable _receiver,\n    uint256 _tollCommitment,\n    bytes32 _pkx, // ephemeral public key x coordinate\n    bytes32 _ciphertext\n  ) external payable {\n    require(_tollCommitment == toll, \"Umbra: Invalid or outdated toll commitment\");\n\n    // also protects from underflow\n    require(msg.value > toll, \"Umbra: Must pay more than the toll\");\n\n    uint256 amount = msg.value - toll;\n    emit Announcement(_receiver, amount, ETH_TOKEN_PLACHOLDER, _pkx, _ciphertext);\n\n    _receiver.transfer(amount);\n  }\n\n  /**\n   * @notice Send and announce an ERC20 payment to a stealth address\n   * @param _receiver Stealth address receiving the payment\n   * @param _tokenAddr Address of the ERC20 token being sent\n   * @param _amount Amount of the token to send, in its own base units\n   * @param _pkx X-coordinate of the ephemeral public key used to encrypt the payload\n   * @param _ciphertext Encrypted entropy (used to generated the stealth address) and payload extension\n   */\n  function sendToken(\n    address _receiver,\n    address _tokenAddr,\n    uint256 _amount,\n    bytes32 _pkx, // ephemeral public key x coordinate\n    bytes32 _ciphertext\n  ) external payable {\n    require(msg.value == toll, \"Umbra: Must pay the exact toll\");\n    require(tokenPayments[_receiver][_tokenAddr] == 0, \"Umbra: Cannot send more tokens to stealth address\");\n\n    tokenPayments[_receiver][_tokenAddr] = _amount;\n    emit Announcement(_receiver, _amount, _tokenAddr, _pkx, _ciphertext);\n\n    SafeERC20.safeTransferFrom(IERC20(_tokenAddr), msg.sender, address(this), _amount);\n  }\n\n  // ======================================= Withdraw =============================================\n\n  /**\n   * @notice Withdraw an ERC20 token payment sent to a stealth address\n   * @dev This method must be directly called by the stealth address\n   * @param _acceptor Address where withdrawn funds should be sent\n   * @param _tokenAddr Address of the ERC20 token being withdrawn\n   */\n  function withdrawToken(address _acceptor, address _tokenAddr) external {\n    _withdrawTokenInternal(msg.sender, _acceptor, _tokenAddr, address(0), 0, IUmbraHookReceiver(0), \"\");\n  }\n\n  /**\n   * @notice Withdraw an ERC20 token payment sent to a stealth address\n   * @dev This method must be directly called by the stealth address\n   * @param _acceptor Address where withdrawn funds should be sent\n   * @param _tokenAddr Address of the ERC20 token being withdrawn\n   * @param _hook Contract that will be called after the token withdrawal has completed\n   * @param _data Arbitrary data that will be passed to the post-withdraw hook contract\n   */\n  function withdrawTokenAndCall(\n    address _acceptor,\n    address _tokenAddr,\n    IUmbraHookReceiver _hook,\n    bytes memory _data\n  ) external {\n    _withdrawTokenInternal(msg.sender, _acceptor, _tokenAddr, address(0), 0, _hook, _data);\n  }\n\n  /**\n   * @notice Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization\n   * @param _stealthAddr The stealth address whose token balance will be withdrawn\n   * @param _acceptor Address where withdrawn funds should be sent\n   * @param _tokenAddr Address of the ERC20 token being withdrawn\n   * @param _sponsor Address which is compensated for submitting the withdrawal tx\n   * @param _sponsorFee Amount of the token to pay to the sponsor\n   * @param _v ECDSA signature component: Parity of the `y` coordinate of point `R`\n   * @param _r ECDSA signature component: x-coordinate of `R`\n   * @param _s ECDSA signature component: `s` value of the signature\n   */\n  function withdrawTokenOnBehalf(\n    address _stealthAddr,\n    address _acceptor,\n    address _tokenAddr,\n    address _sponsor,\n    uint256 _sponsorFee,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external {\n    _validateWithdrawSignature(\n      _stealthAddr,\n      _acceptor,\n      _tokenAddr,\n      _sponsor,\n      _sponsorFee,\n      IUmbraHookReceiver(0),\n      \"\",\n      _v,\n      _r,\n      _s\n    );\n    _withdrawTokenInternal(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, IUmbraHookReceiver(0), \"\");\n  }\n\n  /**\n   * @notice Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization\n   * @param _stealthAddr The stealth address whose token balance will be withdrawn\n   * @param _acceptor Address where withdrawn funds should be sent\n   * @param _tokenAddr Address of the ERC20 token being withdrawn\n   * @param _sponsor Address which is compensated for submitting the withdrawal tx\n   * @param _sponsorFee Amount of the token to pay to the sponsor\n   * @param _hook Contract that will be called after the token withdrawal has completed\n   * @param _data Arbitrary data that will be passed to the post-withdraw hook contract\n   * @param _v ECDSA signature component: Parity of the `y` coordinate of point `R`\n   * @param _r ECDSA signature component: x-coordinate of `R`\n   * @param _s ECDSA signature component: `s` value of the signature\n   */\n  function withdrawTokenAndCallOnBehalf(\n    address _stealthAddr,\n    address _acceptor,\n    address _tokenAddr,\n    address _sponsor,\n    uint256 _sponsorFee,\n    IUmbraHookReceiver _hook,\n    bytes memory _data,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) external {\n    _validateWithdrawSignature(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _hook, _data, _v, _r, _s);\n    _withdrawTokenInternal(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _hook, _data);\n  }\n\n  /**\n   * @notice Low level withdrawal function that should only be called after safety checks\n   * @param _stealthAddr The stealth address whose token balance will be withdrawn\n   * @param _acceptor Address where withdrawn funds should be sent\n   * @param _tokenAddr Address of the ERC20 token being withdrawn\n   * @param _sponsor Address which is compensated for submitting the withdrawal tx\n   * @param _sponsorFee Amount of the token to pay to the sponsor\n   * @param _hook Contract that will be called after the token withdrawal has completed\n   * @param _data Arbitrary data that will be passed to the post-withdraw hook contract\n   */\n  function _withdrawTokenInternal(\n    address _stealthAddr,\n    address _acceptor,\n    address _tokenAddr,\n    address _sponsor,\n    uint256 _sponsorFee,\n    IUmbraHookReceiver _hook,\n    bytes memory _data\n  ) internal {\n    uint256 _amount = tokenPayments[_stealthAddr][_tokenAddr];\n\n    // also protects from underflow\n    require(_amount > _sponsorFee, \"Umbra: No balance to withdraw or fee exceeds balance\");\n\n    uint256 _withdrawalAmount = _amount - _sponsorFee;\n    delete tokenPayments[_stealthAddr][_tokenAddr];\n    emit TokenWithdrawal(_stealthAddr, _acceptor, _withdrawalAmount, _tokenAddr);\n\n    SafeERC20.safeTransfer(IERC20(_tokenAddr), _acceptor, _withdrawalAmount);\n\n    if (_sponsorFee > 0) {\n      SafeERC20.safeTransfer(IERC20(_tokenAddr), _sponsor, _sponsorFee);\n    }\n\n    if (address(_hook) != address(0)) {\n      _hook.tokensWithdrawn(_withdrawalAmount, _stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _data);\n    }\n  }\n\n  /**\n   * @notice Internal method which recovers address from signature of the parameters and throws if not _stealthAddr\n   * @param _stealthAddr The stealth address whose token balance will be withdrawn\n   * @param _acceptor Address where withdrawn funds should be sent\n   * @param _tokenAddr Address of the ERC20 token being withdrawn\n   * @param _sponsor Address which is compensated for submitting the withdrawal tx\n   * @param _sponsorFee Amount of the token to pay to the sponsor\n   * @param _hook Contract that will be called after the token withdrawal has completed\n   * @param _data Arbitrary data that will be passed to the post-withdraw hook contract\n   * @param _v ECDSA signature component: Parity of the `y` coordinate of point `R`\n   * @param _r ECDSA signature component: x-coordinate of `R`\n   * @param _s ECDSA signature component: `s` value of the signature\n   */\n  function _validateWithdrawSignature(\n    address _stealthAddr,\n    address _acceptor,\n    address _tokenAddr,\n    address _sponsor,\n    uint256 _sponsorFee,\n    IUmbraHookReceiver _hook,\n    bytes memory _data,\n    uint8 _v,\n    bytes32 _r,\n    bytes32 _s\n  ) internal view {\n    uint256 _chainId;\n    assembly {\n      _chainId := chainid()\n    }\n\n    bytes32 _digest =\n      keccak256(\n        abi.encodePacked(\n          \"\\x19Ethereum Signed Message:\\n32\",\n          keccak256(\n            abi.encode(_chainId, address(this), _acceptor, _tokenAddr, _sponsor, _sponsorFee, address(_hook), _data)\n          )\n        )\n      );\n\n    address _recoveredAddress = ecrecover(_digest, _v, _r, _s);\n    require(_recoveredAddress != address(0) && _recoveredAddress == _stealthAddr, \"Umbra: Invalid Signature\");\n  }\n}\n"
			},
			"Umbra-Cash/contracts/IUmbraHookReceiver.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\n/// @dev Interface that post-withdraw hooks must implement to interop with Umbra\ninterface IUmbraHookReceiver {\n  /**\n   * @notice Method called after a user completes an Umbra token withdrawal\n   * @param _amount The amount of the token withdrawn _after_ subtracting the sponsor fee\n   * @param _stealthAddr The stealth address whose token balance was withdrawn\n   * @param _acceptor Address where withdrawn funds were sent; can be this contract\n   * @param _tokenAddr Address of the ERC20 token that was withdrawn\n   * @param _sponsor Address which was compensated for submitting the withdrawal tx\n   * @param _sponsorFee Amount of the token that was paid to the sponsor\n   * @param _data Arbitrary data passed to this hook by the withdrawer\n   */\n  function tokensWithdrawn(\n    uint256 _amount,\n    address _stealthAddr,\n    address _acceptor,\n    address _tokenAddr,\n    address _sponsor,\n    uint256 _sponsorFee,\n    bytes memory _data\n  ) external;\n}\n"
			},
			"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
			},
			"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
			},
			"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol": {
				"content": "/*\n    \n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██    ██████  ███████ ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██      ██    ██\n  ██      ██    ██ ██    ██ █████   ██████  ██    ██ ██    ██ █████      ██   ██ █████   ██    ██\n  ██      ██    ██ ██    ██ ██  ██  ██   ██ ██    ██ ██    ██ ██  ██     ██   ██ ██       ██  ██\n   ██████  ██████   ██████  ██   ██ ██████   ██████   ██████  ██   ██ ██ ██████  ███████   ████\n  \n  Find any smart contract, and build your project faster: https://www.cookbook.dev\n  Twitter: https://twitter.com/cookbook_dev\n  Discord: https://discord.gg/cookbookdev\n  \n  Find this contract on Cookbook: https://www.cookbook.dev/protocols/Umbra-Cash?utm=code\n  */\n  \n  // SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x089197413eb3c21043b9d41d9673750ee2e5a30d80329c0f64de3f18e28adc74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82f9ae19cf96921184346db1997d5fcc14860d69427eff0e2d34fd8fdd6003ab\",\"dweb:/ipfs/QmXTPWQzemS7Eb8ehFfNyGHDDxaDtujXoPhVkED4ASzpTF\"]},\"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x0e92b627582fd191d8db7901cba59e29b57059716e53b5034ef8977357c3244a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54c37e6816bd5730227bcb2553dd74d9ed0d4b513485375d644061bc98d3d08e\",\"dweb:/ipfs/QmQ67ZbMnJovZCpgtPbfPQms1ZfWHD5mkaEiy6YrnQvCLD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol\":1901:8495  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol\":1901:8495  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122003125973479e9867fdf7154bd863c0f3b93fd7819198580fde22e73dd71f189164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122003125973479e9867fdf7154bd863c0f3b93fd7819198580fde22e73dd71f189164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB SLT MSIZE PUSH20 0x479E9867FDF7154BD863C0F3B93FD7819198580F 0xDE 0x22 0xE7 RETURNDATASIZE 0xD7 0x1F XOR SWAP2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "1901:6594:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122003125973479e9867fdf7154bd863c0f3b93fd7819198580fde22e73dd71f189164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SUB SLT MSIZE PUSH20 0x479E9867FDF7154BD863C0F3B93FD7819198580F 0xDE 0x22 0xE7 RETURNDATASIZE 0xD7 0x1F XOR SWAP2 PUSH5 0x736F6C6343 STOP SMOD MOD STOP CALLER ",
							"sourceMap": "1901:6594:1:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH",
									"source": 1,
									"value": "B"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "BYTE",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "INVALID",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "PUSH",
									"source": 1,
									"value": "73"
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "MSTORE8",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1901,
									"end": 8495,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122003125973479e9867fdf7154bd863c0f3b93fd7819198580fde22e73dd71f189164736f6c63430007060033",
									".code": [
										{
											"begin": 1901,
											"end": 8495,
											"name": "PUSHDEPLOYADDRESS",
											"source": 1
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1901,
											"end": 8495,
											"name": "REVERT",
											"source": 1
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xed84f952d9565c4fc3690a3c7f295ae401f14d3e952ef104ef991f272127b5dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54f04c5b3bad1b034e0164b453b326fdddbb067664c2255d79b266bccff3b7d7\",\"dweb:/ipfs/Qmb83oMdU7UtMZ8YbnxmP8CDc8rgQFzWQDN3uoAwPDyRRQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x702e70ef0f67b8a45db9bdccdbe3eb1de654d4c8c93503df15784d0964046ff6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e852c6eddd2a3889f99be4b591be57177d2a00bb0c2e0585f2af8e96b7e480fc\",\"dweb:/ipfs/QmRSosgbTfUYW7g3mA6Sy8ydsMGQRWKypWxbqLPe5UgjAN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1887:4991  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1887:4991  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220f1a1307c9c0e3b094ecd16fa7a6385c1bc4487eeea4198c914e68623c543c09164736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f1a1307c9c0e3b094ecd16fa7a6385c1bc4487eeea4198c914e68623c543c09164736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL LOG1 ADDRESS PUSH29 0x9C0E3B094ECD16FA7A6385C1BC4487EEEA4198C914E68623C543C09164 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "1887:3104:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f1a1307c9c0e3b094ecd16fa7a6385c1bc4487eeea4198c914e68623c543c09164736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALL LOG1 ADDRESS PUSH29 0x9C0E3B094ECD16FA7A6385C1BC4487EEEA4198C914E68623C543C09164 PUSH20 0x6F6C634300070600330000000000000000000000 ",
							"sourceMap": "1887:3104:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"safeApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "INVALID",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1887,
									"end": 4991,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f1a1307c9c0e3b094ecd16fa7a6385c1bc4487eeea4198c914e68623c543c09164736f6c63430007060033",
									".code": [
										{
											"begin": 1887,
											"end": 4991,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1887,
											"end": 4991,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xed84f952d9565c4fc3690a3c7f295ae401f14d3e952ef104ef991f272127b5dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54f04c5b3bad1b034e0164b453b326fdddbb067664c2255d79b266bccff3b7d7\",\"dweb:/ipfs/Qmb83oMdU7UtMZ8YbnxmP8CDc8rgQFzWQDN3uoAwPDyRRQ\"]},\"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x702e70ef0f67b8a45db9bdccdbe3eb1de654d4c8c93503df15784d0964046ff6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e852c6eddd2a3889f99be4b591be57177d2a00bb0c2e0585f2af8e96b7e480fc\",\"dweb:/ipfs/QmRSosgbTfUYW7g3mA6Sy8ydsMGQRWKypWxbqLPe5UgjAN\"]},\"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0x88c47dd07640b0c558afd43ab1003cb600f087dbecdac2869315ccab26170e4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed3e6e96547fa60a297b3166919e247242969da0c906482baec9d9130f438e60\",\"dweb:/ipfs/QmQ7SD1Hoc7eNtsrgSb7FFjdNM4WgVyThzXUT4uQ8S7QbZ\"]},\"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ca24a00c51df6788692e84c47dd1c4d59f78dd74bf34a53a648739e10f1cbff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://988aeb7ea692f2092505048dfa69d67d17ab305574d90e7ff1994417c954e1a2\",\"dweb:/ipfs/QmXAP6thCWwKu1sG7YzLDcLqXinNpQejpzTAB5bJPuzwnG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":1405:9089  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":1405:9089  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b2ddfcb06e86cb2fc5225ba32b45a620193974fdc5081dc926424f6824d3cece64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b2ddfcb06e86cb2fc5225ba32b45a620193974fdc5081dc926424f6824d3cece64736f6c63430007060033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 0xDD 0xFC 0xB0 PUSH15 0x86CB2FC5225BA32B45A620193974FD 0xC5 ADDMOD SAR 0xC9 0x26 TIMESTAMP 0x4F PUSH9 0x24D3CECE64736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "1405:7684:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b2ddfcb06e86cb2fc5225ba32b45a620193974fdc5081dc926424f6824d3cece64736f6c63430007060033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 0xDD 0xFC 0xB0 PUSH15 0x86CB2FC5225BA32B45A620193974FD 0xC5 ADDMOD SAR 0xC9 0x26 TIMESTAMP 0x4F PUSH9 0x24D3CECE64736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "1405:7684:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionDelegateCall(address,bytes memory,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "INVALID",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 1405,
									"end": 9089,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b2ddfcb06e86cb2fc5225ba32b45a620193974fdc5081dc926424f6824d3cece64736f6c63430007060033",
									".code": [
										{
											"begin": 1405,
											"end": 9089,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1405,
											"end": 9089,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ca24a00c51df6788692e84c47dd1c4d59f78dd74bf34a53a648739e10f1cbff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://988aeb7ea692f2092505048dfa69d67d17ab305574d90e7ff1994417c954e1a2\",\"dweb:/ipfs/QmXAP6thCWwKu1sG7YzLDcLqXinNpQejpzTAB5bJPuzwnG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x0e92b627582fd191d8db7901cba59e29b57059716e53b5034ef8977357c3244a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54c37e6816bd5730227bcb2553dd74d9ed0d4b513485375d644061bc98d3d08e\",\"dweb:/ipfs/QmQ67ZbMnJovZCpgtPbfPQms1ZfWHD5mkaEiy6YrnQvCLD\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Umbra-Cash/contracts/IUmbraHookReceiver.sol": {
				"IUmbraHookReceiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_stealthAddr",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_acceptor",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_tokenAddr",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_sponsor",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_sponsorFee",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "tokensWithdrawn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface that post-withdraw hooks must implement to interop with Umbra",
						"kind": "dev",
						"methods": {
							"tokensWithdrawn(uint256,address,address,address,address,uint256,bytes)": {
								"params": {
									"_acceptor": "Address where withdrawn funds were sent; can be this contract",
									"_amount": "The amount of the token withdrawn _after_ subtracting the sponsor fee",
									"_data": "Arbitrary data passed to this hook by the withdrawer",
									"_sponsor": "Address which was compensated for submitting the withdrawal tx",
									"_sponsorFee": "Amount of the token that was paid to the sponsor",
									"_stealthAddr": "The stealth address whose token balance was withdrawn",
									"_tokenAddr": "Address of the ERC20 token that was withdrawn"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"tokensWithdrawn(uint256,address,address,address,address,uint256,bytes)": "579073de"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stealthAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sponsorFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokensWithdrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface that post-withdraw hooks must implement to interop with Umbra\",\"kind\":\"dev\",\"methods\":{\"tokensWithdrawn(uint256,address,address,address,address,uint256,bytes)\":{\"params\":{\"_acceptor\":\"Address where withdrawn funds were sent; can be this contract\",\"_amount\":\"The amount of the token withdrawn _after_ subtracting the sponsor fee\",\"_data\":\"Arbitrary data passed to this hook by the withdrawer\",\"_sponsor\":\"Address which was compensated for submitting the withdrawal tx\",\"_sponsorFee\":\"Amount of the token that was paid to the sponsor\",\"_stealthAddr\":\"The stealth address whose token balance was withdrawn\",\"_tokenAddr\":\"Address of the ERC20 token that was withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokensWithdrawn(uint256,address,address,address,address,uint256,bytes)\":{\"notice\":\"Method called after a user completes an Umbra token withdrawal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/contracts/IUmbraHookReceiver.sol\":\"IUmbraHookReceiver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/contracts/IUmbraHookReceiver.sol\":{\"keccak256\":\"0x6bc3a87d2729ee3ecbd67c304a8d8ef7f6389260671a2300af791cc225869f71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://317b0cfc37c221d9d3417165bb1af86ef9bb905333738cc327b4faf639dead2e\",\"dweb:/ipfs/QmeiRRRtwgUYhsi8FrMmG2qyNm2Lr2cjYeTL2sxFChtRMC\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"tokensWithdrawn(uint256,address,address,address,address,uint256,bytes)": {
								"notice": "Method called after a user completes an Umbra token withdrawal"
							}
						},
						"version": 1
					}
				}
			},
			"Umbra-Cash/contracts/Umbra.sol": {
				"Umbra": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_toll",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "_tollCollector",
									"type": "address"
								},
								{
									"internalType": "address payable",
									"name": "_tollReceiver",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "pkx",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "ciphertext",
									"type": "bytes32"
								}
							],
							"name": "Announcement",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "acceptor",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "TokenWithdrawal",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "collectTolls",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_tollCommitment",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "_pkx",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "_ciphertext",
									"type": "bytes32"
								}
							],
							"name": "sendEth",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_tokenAddr",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "_pkx",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "_ciphertext",
									"type": "bytes32"
								}
							],
							"name": "sendToken",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_newToll",
									"type": "uint256"
								}
							],
							"name": "setToll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_newTollCollector",
									"type": "address"
								}
							],
							"name": "setTollCollector",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "_newTollReceiver",
									"type": "address"
								}
							],
							"name": "setTollReceiver",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "tokenPayments",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "toll",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tollCollector",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tollReceiver",
							"outputs": [
								{
									"internalType": "address payable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_acceptor",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_tokenAddr",
									"type": "address"
								}
							],
							"name": "withdrawToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_acceptor",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_tokenAddr",
									"type": "address"
								},
								{
									"internalType": "contract IUmbraHookReceiver",
									"name": "_hook",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								}
							],
							"name": "withdrawTokenAndCall",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_stealthAddr",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_acceptor",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_tokenAddr",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_sponsor",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_sponsorFee",
									"type": "uint256"
								},
								{
									"internalType": "contract IUmbraHookReceiver",
									"name": "_hook",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "_data",
									"type": "bytes"
								},
								{
									"internalType": "uint8",
									"name": "_v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "_r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "_s",
									"type": "bytes32"
								}
							],
							"name": "withdrawTokenAndCallOnBehalf",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_stealthAddr",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_acceptor",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_tokenAddr",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_sponsor",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_sponsorFee",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "_v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "_r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "_s",
									"type": "bytes32"
								}
							],
							"name": "withdrawTokenOnBehalf",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"constructor": {
								"params": {
									"_toll": "Amount of ETH required per send",
									"_tollCollector": "Address that can sweep collected funds",
									"_tollReceiver": "Address that receives collected funds"
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"sendEth(address,uint256,bytes32,bytes32)": {
								"params": {
									"_ciphertext": "Encrypted entropy (used to generated the stealth address) and payload extension",
									"_pkx": "X-coordinate of the ephemeral public key used to encrypt the payload",
									"_receiver": "Stealth address receiving the payment",
									"_tollCommitment": "Exact toll the sender is paying; should equal contract toll; the committment is used to prevent frontrunning attacks by the owner; see https://github.com/ScopeLift/umbra-protocol/issues/54 for more information"
								}
							},
							"sendToken(address,address,uint256,bytes32,bytes32)": {
								"params": {
									"_amount": "Amount of the token to send, in its own base units",
									"_ciphertext": "Encrypted entropy (used to generated the stealth address) and payload extension",
									"_pkx": "X-coordinate of the ephemeral public key used to encrypt the payload",
									"_receiver": "Stealth address receiving the payment",
									"_tokenAddr": "Address of the ERC20 token being sent"
								}
							},
							"setToll(uint256)": {
								"params": {
									"_newToll": "New ETH toll in wei"
								}
							},
							"setTollCollector(address)": {
								"params": {
									"_newTollCollector": "New address which has fund sweeping privileges"
								}
							},
							"setTollReceiver(address)": {
								"params": {
									"_newTollReceiver": "New address which receives collected funds"
								}
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							},
							"withdrawToken(address,address)": {
								"details": "This method must be directly called by the stealth address",
								"params": {
									"_acceptor": "Address where withdrawn funds should be sent",
									"_tokenAddr": "Address of the ERC20 token being withdrawn"
								}
							},
							"withdrawTokenAndCall(address,address,address,bytes)": {
								"details": "This method must be directly called by the stealth address",
								"params": {
									"_acceptor": "Address where withdrawn funds should be sent",
									"_data": "Arbitrary data that will be passed to the post-withdraw hook contract",
									"_hook": "Contract that will be called after the token withdrawal has completed",
									"_tokenAddr": "Address of the ERC20 token being withdrawn"
								}
							},
							"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)": {
								"params": {
									"_acceptor": "Address where withdrawn funds should be sent",
									"_data": "Arbitrary data that will be passed to the post-withdraw hook contract",
									"_hook": "Contract that will be called after the token withdrawal has completed",
									"_r": "ECDSA signature component: x-coordinate of `R`",
									"_s": "ECDSA signature component: `s` value of the signature",
									"_sponsor": "Address which is compensated for submitting the withdrawal tx",
									"_sponsorFee": "Amount of the token to pay to the sponsor",
									"_stealthAddr": "The stealth address whose token balance will be withdrawn",
									"_tokenAddr": "Address of the ERC20 token being withdrawn",
									"_v": "ECDSA signature component: Parity of the `y` coordinate of point `R`"
								}
							},
							"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"_acceptor": "Address where withdrawn funds should be sent",
									"_r": "ECDSA signature component: x-coordinate of `R`",
									"_s": "ECDSA signature component: `s` value of the signature",
									"_sponsor": "Address which is compensated for submitting the withdrawal tx",
									"_sponsorFee": "Amount of the token to pay to the sponsor",
									"_stealthAddr": "The stealth address whose token balance will be withdrawn",
									"_tokenAddr": "Address of the ERC20 token being withdrawn",
									"_v": "ECDSA signature component: Parity of the `y` coordinate of point `R`"
								}
							}
						},
						"stateVariables": {
							"ETH_TOKEN_PLACHOLDER": {
								"details": "Placeholder address used to identify transfer of native ETH"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Umbra-Cash/contracts/Umbra.sol\":1500:13936  contract Umbra is Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3323:3514  constructor(... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  0x60\n  dup2\n  lt\n  iszero\n  tag_2\n  jumpi\n  0x00\n  dup1\n  revert\ntag_2:\n  dup2\n  add\n  swap1\n  dup1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  swap3\n  swap2\n  swap1\n  pop\n  pop\n  pop\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2155:2172  address msgSender */\n  0x00\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2175:2187  _msgSender() */\n  tag_6\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2175:2185  _msgSender */\n  shl(0x20, tag_7)\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2175:2187  _msgSender() */\n  0x20\n  shr\n  jump\t// in\ntag_6:\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2155:2187  address msgSender = _msgSender() */\n  swap1\n  pop\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2206:2215  msgSender */\n  dup1\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2197:2203  _owner */\n  0x00\n  dup1\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2197:2215  _owner = msgSender */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2263:2272  msgSender */\n  dup1\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2230:2273  OwnershipTransferred(address(0), msgSender) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2259:2260  0 */\n  0x00\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2230:2273  OwnershipTransferred(address(0), msgSender) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2121:2280  constructor () internal {... */\n  pop\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3434:3439  _toll */\n  dup3\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3427:3431  toll */\n  0x01\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3427:3439  toll = _toll */\n  dup2\n  swap1\n  sstore\n  pop\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3461:3475  _tollCollector */\n  dup2\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3445:3458  tollCollector */\n  0x02\n  0x00\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3445:3475  tollCollector = _tollCollector */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3496:3509  _tollReceiver */\n  dup1\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3481:3493  tollReceiver */\n  0x03\n  0x00\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3481:3509  tollReceiver = _tollReceiver */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"Umbra-Cash/contracts/Umbra.sol\":3323:3514  constructor(... */\n  pop\n  pop\n  pop\n    /* \"Umbra-Cash/contracts/Umbra.sol\":1500:13936  contract Umbra is Ownable {... */\n  jump(tag_9)\n    /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1869:1973  function _msgSender() internal view virtual returns (address payable) {... */\ntag_7:\n    /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1922:1937  address payable */\n  0x00\n    /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1956:1966  msg.sender */\n  caller\n    /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1949:1966  return msg.sender */\n  swap1\n  pop\n    /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1869:1973  function _msgSender() internal view virtual returns (address payable) {... */\n  swap1\n  jump\t// out\n    /* \"Umbra-Cash/contracts/Umbra.sol\":1500:13936  contract Umbra is Ownable {... */\ntag_9:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Umbra-Cash/contracts/Umbra.sol\":1500:13936  contract Umbra is Ownable {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x81ab0fcd\n      gt\n      tag_19\n      jumpi\n      dup1\n      0xb400ee46\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xb400ee46\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xb9bfabe1\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xbeb9addf\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xc0b9b4ea\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_18\n      jumpi\n      jump(tag_1)\n    tag_20:\n      dup1\n      0x81ab0fcd\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x8ef490b0\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa3dace5d\n      eq\n      tag_13\n      jumpi\n      jump(tag_1)\n    tag_19:\n      dup1\n      0x285aaa20\n      gt\n      tag_21\n      jumpi\n      dup1\n      0x285aaa20\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x3aeac4e1\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x7e8c2f94\n      eq\n      tag_9\n      jumpi\n      jump(tag_1)\n    tag_21:\n      dup1\n      0x059ca2f5\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x0c6b7067\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x185ad0a5\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x23d0e7a1\n      eq\n      tag_5\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7804:8045  function withdrawTokenAndCall(... */\n    tag_2:\n      callvalue\n      dup1\n      iszero\n      tag_22\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      pop\n      tag_23\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x80\n      dup2\n      lt\n      iszero\n      tag_24\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      0x0100000000\n      dup2\n      gt\n      iszero\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      0x0100000000\n      dup4\n      gt\n      or\n      iszero\n      tag_27\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      swap2\n      swap1\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      dup2\n      dup5\n      add\n      mstore\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      swap1\n      pop\n      dup1\n      dup4\n      add\n      swap3\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      swap3\n      swap2\n      swap3\n      swap1\n      pop\n      pop\n      pop\n      tag_28\n      jump\t// in\n    tag_23:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3858:3974  function setTollCollector(address _newTollCollector) external onlyOwner {... */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_29\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_29:\n      pop\n      tag_30\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_31\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_31:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_32\n      jump\t// in\n    tag_30:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4350:4509  function collectTolls() external {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_33\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_33:\n      pop\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10142:10638  function withdrawTokenAndCallOnBehalf(... */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_36\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_36:\n      pop\n      tag_37\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x0140\n      dup2\n      lt\n      iszero\n      tag_38\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      0x0100000000\n      dup2\n      gt\n      iszero\n      tag_39\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_39:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_40\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_40:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      0x0100000000\n      dup4\n      gt\n      or\n      iszero\n      tag_41\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n      swap2\n      swap1\n      dup1\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap4\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup4\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      dup2\n      dup5\n      add\n      mstore\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      swap1\n      pop\n      dup1\n      dup4\n      add\n      swap3\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap2\n      swap3\n      swap2\n      swap3\n      swap1\n      dup1\n      calldataload\n      0xff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_42\n      jump\t// in\n    tag_37:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2588:2607  uint256 public toll */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_43\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_43:\n      pop\n      tag_44\n      tag_45\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7158:7339  function withdrawToken(address _acceptor, address _tokenAddr) external {... */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_46\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_46:\n      pop\n      tag_47\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_48\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_48:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_49\n      jump\t// in\n    tag_47:\n      stop\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2988:3133  function renounceOwnership() public virtual onlyOwner {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_50\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_50:\n      pop\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2705:2733  address public tollCollector */\n    tag_9:\n      callvalue\n      dup1\n      iszero\n      tag_53\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_53:\n      pop\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8742:9269  function withdrawTokenOnBehalf(... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n      pop\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x0100\n      dup2\n      lt\n      iszero\n      tag_58\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_58:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_59\n      jump\t// in\n    tag_57:\n      stop\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2356:2441  function owner() public view virtual returns (address) {... */\n    tag_11:\n      callvalue\n      dup1\n      iszero\n      tag_60\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_60:\n      pop\n      tag_61\n      tag_62\n      jump\t// in\n    tag_61:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2957:3025  mapping(address => mapping(address => uint256)) public tokenPayments */\n    tag_12:\n      callvalue\n      dup1\n      iszero\n      tag_63\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_63:\n      pop\n      tag_64\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_65\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_65:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_66\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3623:3703  function setToll(uint256 _newToll) external onlyOwner {... */\n    tag_13:\n      callvalue\n      dup1\n      iszero\n      tag_67\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_67:\n      pop\n      tag_68\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_69\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_69:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_70\n      jump\t// in\n    tag_68:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2825:2860  address payable public tollReceiver */\n    tag_14:\n      callvalue\n      dup1\n      iszero\n      tag_71\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_71:\n      pop\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      dup1\n      dup3\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6184:6768  function sendToken(... */\n    tag_15:\n      tag_74\n      0x04\n      dup1\n      calldatasize\n      sub\n      0xa0\n      dup2\n      lt\n      iszero\n      tag_75\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_75:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_76\n      jump\t// in\n    tag_74:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5188:5717  function sendEth(... */\n    tag_16:\n      tag_77\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x80\n      dup2\n      lt\n      iszero\n      tag_78\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_78:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_79\n      jump\t// in\n    tag_77:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4123:4243  function setTollReceiver(address payable _newTollReceiver) external onlyOwner {... */\n    tag_17:\n      callvalue\n      dup1\n      iszero\n      tag_80\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_80:\n      pop\n      tag_81\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_82\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_82:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_83\n      jump\t// in\n    tag_81:\n      stop\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3282:3522  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_18:\n      callvalue\n      dup1\n      iszero\n      tag_84\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_84:\n      pop\n      tag_85\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_86\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_86:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_87\n      jump\t// in\n    tag_85:\n      stop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7804:8045  function withdrawTokenAndCall(... */\n    tag_28:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7954:8040  _withdrawTokenInternal(msg.sender, _acceptor, _tokenAddr, address(0), 0, _hook, _data) */\n      tag_89\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7977:7987  msg.sender */\n      caller\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7989:7998  _acceptor */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8000:8010  _tokenAddr */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8020:8021  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8024:8025  0 */\n      dup1\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8027:8032  _hook */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8034:8039  _data */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7954:7976  _withdrawTokenInternal */\n      tag_90\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7954:8040  _withdrawTokenInternal(msg.sender, _acceptor, _tokenAddr, address(0), 0, _hook, _data) */\n      jump\t// in\n    tag_89:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7804:8045  function withdrawTokenAndCall(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3858:3974  function setTollCollector(address _newTollCollector) external onlyOwner {... */\n    tag_32:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      tag_92\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2589  _msgSender */\n      tag_93\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      jump\t// in\n    tag_92:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      tag_94\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2573  owner */\n      tag_62\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      jump\t// in\n    tag_94:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2560:2628  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_95\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_95:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3952:3969  _newTollCollector */\n      dup1\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3936:3949  tollCollector */\n      0x02\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3936:3969  tollCollector = _newTollCollector */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3858:3974  function setTollCollector(address _newTollCollector) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4350:4509  function collectTolls() external {... */\n    tag_35:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4411:4424  tollCollector */\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4397:4424  msg.sender == tollCollector */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4397:4407  msg.sender */\n      caller\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4397:4424  msg.sender == tollCollector */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4389:4454  require(msg.sender == tollCollector, \"Umbra: Not toll collector\") */\n      tag_98\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x19\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x556d6272613a204e6f7420746f6c6c20636f6c6c6563746f7200000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_98:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4460:4472  tollReceiver */\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4460:4481  tollReceiver.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4460:4504  tollReceiver.transfer(address(this).balance) */\n      0x08fc\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4482:4503  address(this).balance */\n      selfbalance\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4460:4504  tollReceiver.transfer(address(this).balance) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_100\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_100:\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4350:4509  function collectTolls() external {... */\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10142:10638  function withdrawTokenAndCallOnBehalf(... */\n    tag_42:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10419:10531  _validateWithdrawSignature(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _hook, _data, _v, _r, _s) */\n      tag_102\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10446:10458  _stealthAddr */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10460:10469  _acceptor */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10471:10481  _tokenAddr */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10483:10491  _sponsor */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10493:10504  _sponsorFee */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10506:10511  _hook */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10513:10518  _data */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10520:10522  _v */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10524:10526  _r */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10528:10530  _s */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10419:10445  _validateWithdrawSignature */\n      tag_103\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10419:10531  _validateWithdrawSignature(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _hook, _data, _v, _r, _s) */\n      jump\t// in\n    tag_102:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10537:10633  _withdrawTokenInternal(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _hook, _data) */\n      tag_104\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10560:10572  _stealthAddr */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10574:10583  _acceptor */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10585:10595  _tokenAddr */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10597:10605  _sponsor */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10607:10618  _sponsorFee */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10620:10625  _hook */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10627:10632  _data */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10537:10559  _withdrawTokenInternal */\n      tag_90\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10537:10633  _withdrawTokenInternal(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _hook, _data) */\n      jump\t// in\n    tag_104:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":10142:10638  function withdrawTokenAndCallOnBehalf(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2588:2607  uint256 public toll */\n    tag_45:\n      sload(0x01)\n      dup2\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7158:7339  function withdrawToken(address _acceptor, address _tokenAddr) external {... */\n    tag_49:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7235:7334  _withdrawTokenInternal(msg.sender, _acceptor, _tokenAddr, address(0), 0, IUmbraHookReceiver(0), \"\") */\n      tag_106\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7258:7268  msg.sender */\n      caller\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7270:7279  _acceptor */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7281:7291  _tokenAddr */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7301:7302  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7305:7306  0 */\n      dup1\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7327:7328  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7235:7334  _withdrawTokenInternal(msg.sender, _acceptor, _tokenAddr, address(0), 0, IUmbraHookReceiver(0), \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7235:7257  _withdrawTokenInternal */\n      tag_90\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7235:7334  _withdrawTokenInternal(msg.sender, _acceptor, _tokenAddr, address(0), 0, IUmbraHookReceiver(0), \"\") */\n      jump\t// in\n    tag_106:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":7158:7339  function withdrawToken(address _acceptor, address _tokenAddr) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2988:3133  function renounceOwnership() public virtual onlyOwner {... */\n    tag_52:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      tag_108\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2589  _msgSender */\n      tag_93\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      jump\t// in\n    tag_108:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      tag_109\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2573  owner */\n      tag_62\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      jump\t// in\n    tag_109:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2560:2628  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_110:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3094:3095  0 */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3057:3097  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3078:3084  _owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3057:3097  OwnershipTransferred(_owner, address(0)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3124:3125  0 */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3107:3113  _owner */\n      dup1\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3107:3126  _owner = address(0) */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2988:3133  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2705:2733  address public tollCollector */\n    tag_55:\n      0x02\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8742:9269  function withdrawTokenOnBehalf(... */\n    tag_59:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8958:9149  _validateWithdrawSignature(... */\n      tag_113\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8992:9004  _stealthAddr */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9012:9021  _acceptor */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9029:9039  _tokenAddr */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9047:9055  _sponsor */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9063:9074  _sponsorFee */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9101:9102  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8958:9149  _validateWithdrawSignature(... */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9121:9123  _v */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9131:9133  _r */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9141:9143  _s */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8958:8984  _validateWithdrawSignature */\n      tag_103\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8958:9149  _validateWithdrawSignature(... */\n      jump\t// in\n    tag_113:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9155:9264  _withdrawTokenInternal(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, IUmbraHookReceiver(0), \"\") */\n      tag_114\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9178:9190  _stealthAddr */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9192:9201  _acceptor */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9203:9213  _tokenAddr */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9215:9223  _sponsor */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9225:9236  _sponsorFee */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9257:9258  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9155:9264  _withdrawTokenInternal(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, IUmbraHookReceiver(0), \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9155:9177  _withdrawTokenInternal */\n      tag_90\n        /* \"Umbra-Cash/contracts/Umbra.sol\":9155:9264  _withdrawTokenInternal(_stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, IUmbraHookReceiver(0), \"\") */\n      jump\t// in\n    tag_114:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":8742:9269  function withdrawTokenOnBehalf(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2356:2441  function owner() public view virtual returns (address) {... */\n    tag_62:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2402:2409  address */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2428:2434  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2421:2434  return _owner */\n      swap1\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2356:2441  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2957:3025  mapping(address => mapping(address => uint256)) public tokenPayments */\n    tag_66:\n      mstore(0x20, 0x04)\n      dup2\n      0x00\n      mstore\n      mstore(0x20, keccak256(0x00, 0x40))\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap2\n      pop\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3623:3703  function setToll(uint256 _newToll) external onlyOwner {... */\n    tag_70:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      tag_117\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2589  _msgSender */\n      tag_93\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      jump\t// in\n    tag_117:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      tag_118\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2573  owner */\n      tag_62\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      jump\t// in\n    tag_118:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2560:2628  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_119:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3690:3698  _newToll */\n      dup1\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3683:3687  toll */\n      0x01\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3683:3698  toll = _newToll */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":3623:3703  function setToll(uint256 _newToll) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2825:2860  address payable public tollReceiver */\n    tag_73:\n      0x03\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6184:6768  function sendToken(... */\n    tag_76:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6399:6403  toll */\n      sload(0x01)\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6386:6395  msg.value */\n      callvalue\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6386:6403  msg.value == toll */\n      eq\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6378:6438  require(msg.value == toll, \"Umbra: Must pay the exact toll\") */\n      tag_122\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1e\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x556d6272613a204d757374207061792074686520657861637420746f6c6c0000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_122:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6492:6493  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6452:6465  tokenPayments */\n      0x04\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6452:6476  tokenPayments[_receiver] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6466:6475  _receiver */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6452:6476  tokenPayments[_receiver] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6452:6488  tokenPayments[_receiver][_tokenAddr] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6477:6487  _tokenAddr */\n      dup7\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6452:6488  tokenPayments[_receiver][_tokenAddr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6452:6493  tokenPayments[_receiver][_tokenAddr] == 0 */\n      eq\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6444:6547  require(tokenPayments[_receiver][_tokenAddr] == 0, \"Umbra: Cannot send more tokens to stealth address\") */\n      tag_123\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x31\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_91b974c51d0aa6487a00d9c7a5b1a24d189aa620f85343b127c7cf92d6abc644\n      0x31\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_123:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6593:6600  _amount */\n      dup3\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6554:6567  tokenPayments */\n      0x04\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6554:6578  tokenPayments[_receiver] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6568:6577  _receiver */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6554:6578  tokenPayments[_receiver] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6554:6590  tokenPayments[_receiver][_tokenAddr] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6579:6589  _tokenAddr */\n      dup7\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6554:6590  tokenPayments[_receiver][_tokenAddr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6554:6600  tokenPayments[_receiver][_tokenAddr] = _amount */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6644:6654  _tokenAddr */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6611:6674  Announcement(_receiver, _amount, _tokenAddr, _pkx, _ciphertext) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6624:6633  _receiver */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6611:6674  Announcement(_receiver, _amount, _tokenAddr, _pkx, _ciphertext) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x29877766fa2bfe3b90008d6d92f965eca91cbc5757ed775740e460799fb92219\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6635:6642  _amount */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6656:6660  _pkx */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6662:6673  _ciphertext */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6611:6674  Announcement(_receiver, _amount, _tokenAddr, _pkx, _ciphertext) */\n      mload(0x40)\n      dup1\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6681:6763  SafeERC20.safeTransferFrom(IERC20(_tokenAddr), msg.sender, address(this), _amount) */\n      tag_124\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6715:6725  _tokenAddr */\n      dup5\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6728:6738  msg.sender */\n      caller\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6748:6752  this */\n      address\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6755:6762  _amount */\n      dup7\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6681:6707  SafeERC20.safeTransferFrom */\n      tag_125\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6681:6763  SafeERC20.safeTransferFrom(IERC20(_tokenAddr), msg.sender, address(this), _amount) */\n      jump\t// in\n    tag_124:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":6184:6768  function sendToken(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5188:5717  function sendEth(... */\n    tag_79:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5399:5403  toll */\n      sload(0x01)\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5380:5395  _tollCommitment */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5380:5403  _tollCommitment == toll */\n      eq\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5372:5450  require(_tollCommitment == toll, \"Umbra: Invalid or outdated toll commitment\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_3ba2500259aaf08c491d20e45c71e26c1f3d2f4807d550af7cccfc731dcbadcb\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_127:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5513:5517  toll */\n      sload(0x01)\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5501:5510  msg.value */\n      callvalue\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5501:5517  msg.value > toll */\n      gt\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5493:5556  require(msg.value > toll, \"Umbra: Must pay more than the toll\") */\n      tag_128\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x22\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_00ca1233b01abaabbdb94e9011f33e8aa8820481688dcdb39c067911cae56dfa\n      0x22\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_128:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5563:5577  uint256 amount */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5592:5596  toll */\n      sload(0x01)\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5580:5589  msg.value */\n      callvalue\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5580:5596  msg.value - toll */\n      sub\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5563:5596  uint256 amount = msg.value - toll */\n      swap1\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":2442:2484  0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE */\n      0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5607:5679  Announcement(_receiver, amount, ETH_TOKEN_PLACHOLDER, _pkx, _ciphertext) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5620:5629  _receiver */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5607:5679  Announcement(_receiver, amount, ETH_TOKEN_PLACHOLDER, _pkx, _ciphertext) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x29877766fa2bfe3b90008d6d92f965eca91cbc5757ed775740e460799fb92219\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5631:5637  amount */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5661:5665  _pkx */\n      dup7\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5667:5678  _ciphertext */\n      dup7\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5607:5679  Announcement(_receiver, amount, ETH_TOKEN_PLACHOLDER, _pkx, _ciphertext) */\n      mload(0x40)\n      dup1\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5686:5695  _receiver */\n      dup5\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5686:5704  _receiver.transfer */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5686:5712  _receiver.transfer(amount) */\n      0x08fc\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5705:5711  amount */\n      dup3\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5686:5712  _receiver.transfer(amount) */\n      swap1\n      dup2\n      iszero\n      mul\n      swap1\n      mload(0x40)\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup9\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_130\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_130:\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":5188:5717  function sendEth(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4123:4243  function setTollReceiver(address payable _newTollReceiver) external onlyOwner {... */\n    tag_83:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      tag_132\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2589  _msgSender */\n      tag_93\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      jump\t// in\n    tag_132:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      tag_133\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2573  owner */\n      tag_62\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      jump\t// in\n    tag_133:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2560:2628  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_134\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_134:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4222:4238  _newTollReceiver */\n      dup1\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4207:4219  tollReceiver */\n      0x03\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4207:4238  tollReceiver = _newTollReceiver */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":4123:4243  function setTollReceiver(address payable _newTollReceiver) external onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3282:3522  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_87:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      tag_137\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2589  _msgSender */\n      tag_93\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2579:2591  _msgSender() */\n      jump\t// in\n    tag_137:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      tag_138\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2573  owner */\n      tag_62\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2575  owner() */\n      jump\t// in\n    tag_138:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2568:2591  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":2560:2628  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_139\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_139:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3390:3391  0 */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3370:3392  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3370:3378  newOwner */\n      dup2\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3370:3392  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3362:3435  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_141\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_141:\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3479:3487  newOwner */\n      dup1\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3450:3488  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3471:3477  _owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3450:3488  OwnershipTransferred(_owner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3507:3515  newOwner */\n      dup1\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3498:3504  _owner */\n      0x00\n      dup1\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3498:3515  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":3282:3522  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11285:12239  function _withdrawTokenInternal(... */\n    tag_90:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11510:11525  uint256 _amount */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11528:11541  tokenPayments */\n      0x04\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11528:11555  tokenPayments[_stealthAddr] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11542:11554  _stealthAddr */\n      dup10\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11528:11555  tokenPayments[_stealthAddr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11528:11567  tokenPayments[_stealthAddr][_tokenAddr] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11556:11566  _tokenAddr */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11528:11567  tokenPayments[_stealthAddr][_tokenAddr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11510:11567  uint256 _amount = tokenPayments[_stealthAddr][_tokenAddr] */\n      swap1\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11628:11639  _sponsorFee */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11618:11625  _amount */\n      dup2\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11618:11639  _amount > _sponsorFee */\n      gt\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11610:11696  require(_amount > _sponsorFee, \"Umbra: No balance to withdraw or fee exceeds balance\") */\n      tag_143\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x34\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_328b8850d4c62d9ba870e891ed4b84c12bcfb70602a6a87db8f71bfe7c2b366f\n      0x34\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_143:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11703:11728  uint256 _withdrawalAmount */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11741:11752  _sponsorFee */\n      dup5\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11731:11738  _amount */\n      dup3\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11731:11752  _amount - _sponsorFee */\n      sub\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11703:11752  uint256 _withdrawalAmount = _amount - _sponsorFee */\n      swap1\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11765:11778  tokenPayments */\n      0x04\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11765:11792  tokenPayments[_stealthAddr] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11779:11791  _stealthAddr */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11765:11792  tokenPayments[_stealthAddr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11765:11804  tokenPayments[_stealthAddr][_tokenAddr] */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11793:11803  _tokenAddr */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11765:11804  tokenPayments[_stealthAddr][_tokenAddr] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11758:11804  delete tokenPayments[_stealthAddr][_tokenAddr] */\n      0x00\n      swap1\n      sstore\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11875:11885  _tokenAddr */\n      dup7\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11815:11886  TokenWithdrawal(_stealthAddr, _acceptor, _withdrawalAmount, _tokenAddr) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11845:11854  _acceptor */\n      dup9\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11815:11886  TokenWithdrawal(_stealthAddr, _acceptor, _withdrawalAmount, _tokenAddr) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11831:11843  _stealthAddr */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11815:11886  TokenWithdrawal(_stealthAddr, _acceptor, _withdrawalAmount, _tokenAddr) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x30eb3583ad09933b693a45452ab07512244cdbc5868701aa004c27b7b267c249\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11856:11873  _withdrawalAmount */\n      dup5\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11815:11886  TokenWithdrawal(_stealthAddr, _acceptor, _withdrawalAmount, _tokenAddr) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11893:11965  SafeERC20.safeTransfer(IERC20(_tokenAddr), _acceptor, _withdrawalAmount) */\n      tag_144\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11923:11933  _tokenAddr */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11936:11945  _acceptor */\n      dup10\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11947:11964  _withdrawalAmount */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11893:11915  SafeERC20.safeTransfer */\n      tag_145\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11893:11965  SafeERC20.safeTransfer(IERC20(_tokenAddr), _acceptor, _withdrawalAmount) */\n      jump\t// in\n    tag_144:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11990:11991  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11976:11987  _sponsorFee */\n      dup6\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11976:11991  _sponsorFee > 0 */\n      gt\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11972:12073  if (_sponsorFee > 0) {... */\n      iszero\n      tag_146\n      jumpi\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12001:12066  SafeERC20.safeTransfer(IERC20(_tokenAddr), _sponsor, _sponsorFee) */\n      tag_147\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12031:12041  _tokenAddr */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12044:12052  _sponsor */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12054:12065  _sponsorFee */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12001:12023  SafeERC20.safeTransfer */\n      tag_145\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12001:12066  SafeERC20.safeTransfer(IERC20(_tokenAddr), _sponsor, _sponsorFee) */\n      jump\t// in\n    tag_147:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11972:12073  if (_sponsorFee > 0) {... */\n    tag_146:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12109:12110  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12083:12111  address(_hook) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12091:12096  _hook */\n      dup5\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12083:12111  address(_hook) != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12079:12235  if (address(_hook) != address(0)) {... */\n      tag_148\n      jumpi\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12121:12126  _hook */\n      dup4\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12121:12142  _hook.tokensWithdrawn */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x579073de\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12143:12160  _withdrawalAmount */\n      dup3\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12162:12174  _stealthAddr */\n      dup12\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12176:12185  _acceptor */\n      dup12\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12187:12197  _tokenAddr */\n      dup12\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12199:12207  _sponsor */\n      dup12\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12209:12220  _sponsorFee */\n      dup12\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12222:12227  _data */\n      dup11\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12121:12228  _hook.tokensWithdrawn(_withdrawalAmount, _stealthAddr, _acceptor, _tokenAddr, _sponsor, _sponsorFee, _data) */\n      mload(0x40)\n      dup9\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup9\n      dup2\n      mstore\n      0x20\n      add\n      dup8\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup7\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_149:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_151\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_149)\n    tag_151:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_152\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_152:\n      pop\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_153\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_153:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_155\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_155:\n      pop\n      pop\n      pop\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":12079:12235  if (address(_hook) != address(0)) {... */\n    tag_148:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":11285:12239  function _withdrawTokenInternal(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1869:1973  function _msgSender() internal view virtual returns (address payable) {... */\n    tag_93:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1922:1937  address payable */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1956:1966  msg.sender */\n      caller\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1949:1966  return msg.sender */\n      swap1\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":1869:1973  function _msgSender() internal view virtual returns (address payable) {... */\n      swap1\n      jump\t// out\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13127:13934  function _validateWithdrawSignature(... */\n    tag_103:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13407:13423  uint256 _chainId */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13458:13467  chainid() */\n      chainid\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13446:13467  _chainId := chainid() */\n      swap1\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13479:13494  bytes32 _digest */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13630:13638  _chainId */\n      dup2\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13648:13652  this */\n      address\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13655:13664  _acceptor */\n      dup13\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13666:13676  _tokenAddr */\n      dup13\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13678:13686  _sponsor */\n      dup13\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13688:13699  _sponsorFee */\n      dup13\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13709:13714  _hook */\n      dup13\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13717:13722  _data */\n      dup13\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13619:13723  abi.encode(_chainId, address(this), _acceptor, _tokenAddr, _sponsor, _sponsorFee, address(_hook), _data) */\n      add(0x20, mload(0x40))\n      dup1\n      dup10\n      dup2\n      mstore\n      0x20\n      add\n      dup9\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup8\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup7\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup6\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_158:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_160\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_158)\n    tag_160:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_161\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_161:\n      pop\n      swap10\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13596:13735  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13522:13745  abi.encodePacked(... */\n      add(0x20, mload(0x40))\n      dup1\n      dup1\n      0x19457468657265756d205369676e6564204d6573736167653a0a333200000000\n      dup2\n      mstore\n      pop\n      0x1c\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13503:13753  keccak256(... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13479:13753  bytes32 _digest =... */\n      swap1\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13760:13785  address _recoveredAddress */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13788:13818  ecrecover(_digest, _v, _r, _s) */\n      0x01\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13798:13805  _digest */\n      dup3\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13807:13809  _v */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13811:13813  _r */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13815:13817  _s */\n      dup8\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13788:13818  ecrecover(_digest, _v, _r, _s) */\n      mload(0x40)\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x40\n      mstore\n      mload(0x40)\n      dup1\n      dup6\n      dup2\n      mstore\n      0x20\n      add\n      dup5\n      0xff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_163\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_163:\n      pop\n      pop\n      pop\n      mload(sub(mload(0x40), 0x20))\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13760:13818  address _recoveredAddress = ecrecover(_digest, _v, _r, _s) */\n      swap1\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13861:13862  0 */\n      0x00\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13832:13863  _recoveredAddress != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13832:13849  _recoveredAddress */\n      dup2\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13832:13863  _recoveredAddress != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13832:13900  _recoveredAddress != address(0) && _recoveredAddress == _stealthAddr */\n      dup1\n      iszero\n      tag_164\n      jumpi\n      pop\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13888:13900  _stealthAddr */\n      dup13\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13867:13900  _recoveredAddress == _stealthAddr */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13867:13884  _recoveredAddress */\n      dup2\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13867:13900  _recoveredAddress == _stealthAddr */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13832:13900  _recoveredAddress != address(0) && _recoveredAddress == _stealthAddr */\n    tag_164:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13824:13929  require(_recoveredAddress != address(0) && _recoveredAddress == _stealthAddr, \"Umbra: Invalid Signature\") */\n      tag_165\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x18\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x556d6272613a20496e76616c6964205369676e61747572650000000000000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_165:\n        /* \"Umbra-Cash/contracts/Umbra.sol\":13127:13934  function _validateWithdrawSignature(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2156:2359  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_125:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2256:2352  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_167\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2276:2281  token */\n      dup5\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2306:2333  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2335:2339  from */\n      dup6\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2341:2343  to */\n      dup6\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2345:2350  value */\n      dup6\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2283:2351  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup5\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap4\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2256:2275  _callOptionalReturn */\n      tag_168\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2256:2352  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_167:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2156:2359  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1975:2150  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_145:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2057:2143  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_170\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2077:2082  token */\n      dup4\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2107:2130  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2132:2134  to */\n      dup5\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2136:2141  value */\n      dup5\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2084:2142  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      dup1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n      swap1\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      0x20\n      dup3\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      dup4\n      dup2\n      dup4\n      and\n      or\n      dup4\n      mstore\n      pop\n      pop\n      pop\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2057:2076  _callOptionalReturn */\n      tag_168\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":2057:2143  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_170:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":1975:2150  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4238:4989  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_168:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4657:4680  bytes memory returndata */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4683:4752  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_172\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4711:4715  data */\n      dup3\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4683:4752  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4691:4696  token */\n      dup6\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4683:4710  address(token).functionCall */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      tag_173\n      swap1\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4683:4752  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_172:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4657:4752  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4786:4787  0 */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4766:4776  returndata */\n      dup2\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4766:4783  returndata.length */\n      mload\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4766:4787  returndata.length > 0 */\n      gt\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4762:4983  if (returndata.length > 0) { // Return data is optional... */\n      iszero\n      tag_174\n      jumpi\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4906:4916  returndata */\n      dup1\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4895:4925  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      0x20\n      dup2\n      lt\n      iszero\n      tag_175\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_175:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4887:4972  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_176\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x2a\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd\n      0x2a\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_176:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4762:4983  if (returndata.length > 0) { // Return data is optional... */\n    tag_174:\n        /* \"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":4238:4989  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":4852:5045  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {... */\n    tag_173:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":4955:4967  bytes memory */\n      0x60\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":4986:5038  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_178\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":5008:5014  target */\n      dup5\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":5016:5020  data */\n      dup5\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":5022:5023  0 */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":5025:5037  errorMessage */\n      dup6\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":4986:5007  functionCallWithValue */\n      tag_179\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":4986:5038  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_178:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":4979:5038  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap1\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":4852:5045  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":5879:6402  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {... */\n    tag_179:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6006:6018  bytes memory */\n      0x60\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6063:6068  value */\n      dup3\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6038:6059  address(this).balance */\n      selfbalance\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6038:6068  address(this).balance >= value */\n      lt\n      iszero\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6030:6111  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_181\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_181:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6129:6147  isContract(target) */\n      tag_182\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6140:6146  target */\n      dup6\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6129:6139  isContract */\n      tag_183\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6129:6147  isContract(target) */\n      jump\t// in\n    tag_182:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6121:6181  require(isContract(target), \"Address: call to non-contract\") */\n      tag_184\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x1d\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n      dup2\n      mstore\n      pop\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_184:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6252:6264  bool success */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6266:6289  bytes memory returndata */\n      dup1\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6293:6299  target */\n      dup7\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6293:6304  target.call */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6313:6318  value */\n      dup6\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6321:6325  data */\n      dup8\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6293:6326  target.call{ value: value }(data) */\n      mload(0x40)\n      dup1\n      dup3\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n    tag_185:\n      0x20\n      dup4\n      lt\n      tag_187\n      jumpi\n      dup1\n      mload\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap2\n      pop\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      0x20\n      dup4\n      sub\n      swap3\n      pop\n      jump(tag_185)\n    tag_187:\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      dup1\n      not\n      dup3\n      mload\n      and\n      dup2\n      dup5\n      mload\n      and\n      dup1\n      dup3\n      or\n      dup6\n      mstore\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      add\n      swap2\n      pop\n      pop\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_190\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_189)\n    tag_190:\n      0x60\n      swap2\n      pop\n    tag_189:\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6251:6326  (bool success, bytes memory returndata) = target.call{ value: value }(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6343:6395  _verifyCallResult(success, returndata, errorMessage) */\n      tag_191\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6361:6368  success */\n      dup3\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6370:6380  returndata */\n      dup3\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6382:6394  errorMessage */\n      dup7\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6343:6360  _verifyCallResult */\n      tag_192\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6343:6395  _verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_191:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":6336:6395  return _verifyCallResult(success, returndata, errorMessage) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":5879:6402  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":1997:2410  function isContract(address account) internal view returns (bool) {... */\n    tag_183:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2057:2061  bool */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2260:2272  uint256 size */\n      dup1\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2369:2376  account */\n      dup3\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2357:2377  extcodesize(account) */\n      extcodesize\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2349:2377  size := extcodesize(account) */\n      swap1\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2402:2403  0 */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2395:2399  size */\n      dup2\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2395:2403  size > 0 */\n      gt\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":2388:2403  return size > 0 */\n      swap2\n      pop\n      pop\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":1997:2410  function isContract(address account) internal view returns (bool) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8362:9087  function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {... */\n    tag_192:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8477:8489  bytes memory */\n      0x60\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8505:8512  success */\n      dup4\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8501:9081  if (success) {... */\n      iszero\n      tag_195\n      jumpi\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8535:8545  returndata */\n      dup3\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8528:8545  return returndata */\n      swap1\n      pop\n      jump(tag_194)\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8501:9081  if (success) {... */\n    tag_195:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8666:8667  0 */\n      0x00\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8646:8656  returndata */\n      dup4\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8646:8663  returndata.length */\n      mload\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8646:8667  returndata.length > 0 */\n      gt\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8642:9071  if (returndata.length > 0) {... */\n      iszero\n      tag_197\n      jumpi\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8904:8914  returndata */\n      dup3\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8898:8915  mload(returndata) */\n      mload\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8964:8979  returndata_size */\n      dup1\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8951:8961  returndata */\n      dup5\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8947:8949  32 */\n      0x20\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8943:8962  add(32, returndata) */\n      add\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8936:8980  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8853:8998  {... */\n    tag_197:\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":9043:9055  errorMessage */\n      dup2\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":9036:9056  revert(errorMessage) */\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n    tag_199:\n      dup4\n      dup2\n      lt\n      iszero\n      tag_201\n      jumpi\n      dup1\n      dup3\n      add\n      mload\n      dup2\n      dup5\n      add\n      mstore\n      0x20\n      dup2\n      add\n      swap1\n      pop\n      jump(tag_199)\n    tag_201:\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_202\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_202:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":8362:9087  function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {... */\n    tag_194:\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n    stop\n    data_00ca1233b01abaabbdb94e9011f33e8aa8820481688dcdb39c067911cae56dfa 556d6272613a204d75737420706179206d6f7265207468616e2074686520746f6c6c\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_328b8850d4c62d9ba870e891ed4b84c12bcfb70602a6a87db8f71bfe7c2b366f 556d6272613a204e6f2062616c616e636520746f207769746864726177206f722066656520657863656564732062616c616e6365\n    data_3ba2500259aaf08c491d20e45c71e26c1f3d2f4807d550af7cccfc731dcbadcb 556d6272613a20496e76616c6964206f72206f7574646174656420746f6c6c20636f6d6d69746d656e74\n    data_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c 416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c\n    data_91b974c51d0aa6487a00d9c7a5b1a24d189aa620f85343b127c7cf92d6abc644 556d6272613a2043616e6e6f742073656e64206d6f726520746f6b656e7320746f20737465616c74682061646472657373\n    data_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd 5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564\n\n    auxdata: 0xa26469706673582212205e254d7b699170d9a1cf44ff06a3b68122013e708b2765b975079610b20853f264736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2399 CODESIZE SUB DUP1 PUSH2 0x2399 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 PUSH2 0x68 PUSH2 0x197 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP DUP3 PUSH1 0x1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP PUSH2 0x19F JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x21EB DUP1 PUSH2 0x1AE PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81AB0FCD GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB400EE46 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB400EE46 EQ PUSH2 0x6F9 JUMPI DUP1 PUSH4 0xB9BFABE1 EQ PUSH2 0x73A JUMPI DUP1 PUSH4 0xBEB9ADDF EQ PUSH2 0x7BC JUMPI DUP1 PUSH4 0xC0B9B4EA EQ PUSH2 0x81E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x86F JUMPI PUSH2 0xFE JUMP JUMPDEST DUP1 PUSH4 0x81AB0FCD EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5F8 JUMPI DUP1 PUSH4 0x8EF490B0 EQ PUSH2 0x639 JUMPI DUP1 PUSH4 0xA3DACE5D EQ PUSH2 0x6BE JUMPI PUSH2 0xFE JUMP JUMPDEST DUP1 PUSH4 0x285AAA20 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x285AAA20 EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0x452 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x4C3 JUMPI DUP1 PUSH4 0x7E8C2F94 EQ PUSH2 0x4DA JUMPI PUSH2 0xFE JUMP JUMPDEST DUP1 PUSH4 0x59CA2F5 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0xC6B7067 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x185AD0A5 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x23D0E7A1 EQ PUSH2 0x293 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x8C0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8D6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x291 PUSH2 0x9C9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x425 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xAF7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43C PUSH2 0xB24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB2A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D8 PUSH2 0xB4E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EF PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xCE1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60D PUSH2 0xD2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70E PUSH2 0xE33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x750 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE59 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x81C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x10AE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x86D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x841 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1242 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x892 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1335 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8D0 CALLER DUP6 DUP6 PUSH1 0x0 DUP1 DUP8 DUP8 PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x8DE PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556D6272613A204E6F7420746F6C6C20636F6C6C6563746F7200000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xAF4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xB09 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0xB18 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB4A CALLER DUP4 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1527 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB56 PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB74 PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD03 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP11 DUP11 DUP11 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0xD22 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD82 PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDA0 PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD CALLVALUE EQ PUSH2 0xED0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556D6272613A204D757374207061792074686520657861637420746F6C6C0000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ PUSH2 0xFA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x215B PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x29877766FA2BFE3B90008D6D92F965ECA91CBC5757ED775740E460799FB92219 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x10A7 DUP5 CALLER ADDRESS DUP7 PUSH2 0x1B9D JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP4 EQ PUSH2 0x1108 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x210B PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD CALLVALUE GT PUSH2 0x1162 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x208F PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD CALLVALUE SUB SWAP1 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x29877766FA2BFE3B90008D6D92F965ECA91CBC5757ED775740E460799FB92219 DUP4 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x123A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x124A PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1268 PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x133D PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135B PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x146A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20B1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP4 DUP2 GT PUSH2 0x1600 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x34 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20D7 PUSH1 0x34 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP3 SUB SWAP1 POP PUSH1 0x4 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x30EB3583AD09933B693A45452AB07512244CDBC5868701AA004C27B7B267C249 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x170E DUP8 DUP10 DUP4 PUSH2 0x1C5E JUMP JUMPDEST PUSH1 0x0 DUP6 GT ISZERO PUSH2 0x1723 JUMPI PUSH2 0x1722 DUP8 DUP8 DUP8 PUSH2 0x1C5E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18B0 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x579073DE DUP3 DUP12 DUP12 DUP12 DUP12 DUP12 DUP11 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1845 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x182A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1872 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CHAINID SWAP1 POP PUSH1 0x0 DUP2 ADDRESS DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19AD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1992 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x19DA JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B1C JUMPI POP DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1B8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556D6272613A20496E76616C6964205369676E61747572650000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1C58 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D00 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1CFB DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D00 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D62 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DEF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1DEA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x218C PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DFE DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1E07 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2135 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E6B DUP6 PUSH2 0x1FAF JUMP JUMPDEST PUSH2 0x1EDD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1F2C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1F09 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F8E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F93 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FA3 DUP3 DUP3 DUP7 PUSH2 0x1FC2 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1FD2 JUMPI DUP3 SWAP1 POP PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x1FE5 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x204C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2031 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2079 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID SSTORE PUSH14 0x6272613A204D7573742070617920 PUSH14 0x6F7265207468616E207468652074 PUSH16 0x6C6C4F776E61626C653A206E6577206F PUSH24 0x6E657220697320746865207A65726F206164647265737355 PUSH14 0x6272613A204E6F2062616C616E63 PUSH6 0x20746F207769 PUSH21 0x6864726177206F7220666565206578636565647320 PUSH3 0x616C61 PUSH15 0x6365556D6272613A20496E76616C69 PUSH5 0x206F72206F PUSH22 0x74646174656420746F6C6C20636F6D6D69746D656E74 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C556D6272 PUSH2 0x3A20 NUMBER PUSH2 0x6E6E PUSH16 0x742073656E64206D6F726520746F6B65 PUSH15 0x7320746F20737465616C7468206164 PUSH5 0x7265737353 PUSH2 0x6665 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212205E254D7B PUSH10 0x9170D9A1CF44FF06A3B6 DUP2 0x22 ADD RETURNDATACOPY PUSH17 0x8B2765B975079610B20853F264736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "1500:12436:7:-:0;;;3323:191;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2155:17:0;2175:12;:10;;;:12;;:::i;:::-;2155:32;;2206:9;2197:6;;:18;;;;;;;;;;;;;;;;;;2263:9;2230:43;;2259:1;2230:43;;;;;;;;;;;;2121:159;3434:5:7;3427:4;:12;;;;3461:14;3445:13;;:30;;;;;;;;;;;;;;;;;;3496:13;3481:12;;:28;;;;;;;;;;;;;;;;;;3323:191;;;1500:12436;;1869:104:5;1922:15;1956:10;1949:17;;1869:104;:::o;1500:12436:7:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100fe5760003560e01c806381ab0fcd11610095578063b400ee4611610064578063b400ee46146106f9578063b9bfabe11461073a578063beb9addf146107bc578063c0b9b4ea1461081e578063f2fde38b1461086f576100fe565b806381ab0fcd1461051b5780638da5cb5b146105f85780638ef490b014610639578063a3dace5d146106be576100fe565b8063285aaa20116100d1578063285aaa20146104275780633aeac4e114610452578063715018a6146104c35780637e8c2f94146104da576100fe565b8063059ca2f5146101035780630c6b70671461022b578063185ad0a51461027c57806323d0e7a114610293575b600080fd5b34801561010f57600080fd5b506102296004803603608081101561012657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156101a357600080fd5b8201836020820111156101b557600080fd5b803590602001918460018302840111640100000000831117156101d757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506108c0565b005b34801561023757600080fd5b5061027a6004803603602081101561024e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108d6565b005b34801561028857600080fd5b506102916109c9565b005b34801561029f57600080fd5b5061042560048036036101408110156102b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561037e57600080fd5b82018360208201111561039057600080fd5b803590602001918460018302840111640100000000831117156103b257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019092919080359060200190929190505050610af7565b005b34801561043357600080fd5b5061043c610b24565b6040518082815260200191505060405180910390f35b34801561045e57600080fd5b506104c16004803603604081101561047557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b2a565b005b3480156104cf57600080fd5b506104d8610b4e565b005b3480156104e657600080fd5b506104ef610cbb565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561052757600080fd5b506105f6600480360361010081101561053f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff1690602001909291908035906020019092919080359060200190929190505050610ce1565b005b34801561060457600080fd5b5061060d610d2c565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064557600080fd5b506106a86004803603604081101561065c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d55565b6040518082815260200191505060405180910390f35b3480156106ca57600080fd5b506106f7600480360360208110156106e157600080fd5b8101908080359060200190929190505050610d7a565b005b34801561070557600080fd5b5061070e610e33565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6107ba600480360360a081101561075057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610e59565b005b61081c600480360360808110156107d257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506110ae565b005b34801561082a57600080fd5b5061086d6004803603602081101561084157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611242565b005b34801561087b57600080fd5b506108be6004803603602081101561089257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611335565b005b6108d03385856000808787611527565b50505050565b6108de6118bb565b73ffffffffffffffffffffffffffffffffffffffff166108fc610d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610985576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a8c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f556d6272613a204e6f7420746f6c6c20636f6c6c6563746f720000000000000081525060200191505060405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610af4573d6000803e3d6000fd5b50565b610b098a8a8a8a8a8a8a8a8a8a6118c3565b610b188a8a8a8a8a8a8a611527565b50505050505050505050565b60015481565b610b4a338383600080600060405180602001604052806000815250611527565b5050565b610b566118bb565b73ffffffffffffffffffffffffffffffffffffffff16610b74610d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610bfd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d0388888888886000604051806020016040528060008152508a8a8a6118c3565b610d228888888888600060405180602001604052806000815250611527565b5050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6004602052816000526040600020602052806000526040600020600091509150505481565b610d826118bb565b73ffffffffffffffffffffffffffffffffffffffff16610da0610d2c565b73ffffffffffffffffffffffffffffffffffffffff1614610e29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8060018190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001543414610ed0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556d6272613a204d757374207061792074686520657861637420746f6c6c000081525060200191505060405180910390fd5b6000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610fa5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603181526020018061215b6031913960400191505060405180910390fd5b82600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f29877766fa2bfe3b90008d6d92f965eca91cbc5757ed775740e460799fb9221985858560405180848152602001838152602001828152602001935050505060405180910390a36110a784333086611b9d565b5050505050565b6001548314611108576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061210b602a913960400191505060405180910390fd5b6001543411611162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061208f6022913960400191505060405180910390fd5b60006001543403905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f29877766fa2bfe3b90008d6d92f965eca91cbc5757ed775740e460799fb9221983868660405180848152602001838152602001828152602001935050505060405180910390a38473ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561123a573d6000803e3d6000fd5b505050505050565b61124a6118bb565b73ffffffffffffffffffffffffffffffffffffffff16611268610d2c565b73ffffffffffffffffffffffffffffffffffffffff16146112f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61133d6118bb565b73ffffffffffffffffffffffffffffffffffffffff1661135b610d2c565b73ffffffffffffffffffffffffffffffffffffffff16146113e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561146a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806120b16026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838111611600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806120d76034913960400191505060405180910390fd5b60008482039050600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f30eb3583ad09933b693a45452ab07512244cdbc5868701aa004c27b7b267c249846040518082815260200191505060405180910390a461170e878983611c5e565b600085111561172357611722878787611c5e565b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146118b0578373ffffffffffffffffffffffffffffffffffffffff1663579073de828b8b8b8b8b8a6040518863ffffffff1660e01b8152600401808881526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561184557808201518184015260208101905061182a565b50505050905090810190601f1680156118725780820380516001836020036101000a031916815260200191505b5098505050505050505050600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b505050505b505050505050505050565b600033905090565b6000469050600081308c8c8c8c8c8c604051602001808981526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119ad578082015181840152602081019050611992565b50505050905090810190601f1680156119da5780820380516001836020036101000a031916815260200191505b5099505050505050505050506040516020818303038152906040528051906020012060405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050600060018287878760405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611aa8573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611b1c57508c73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611b8e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f556d6272613a20496e76616c6964205369676e6174757265000000000000000081525060200191505060405180910390fd5b50505050505050505050505050565b611c58846323b872dd60e01b858585604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d00565b50505050565b611cfb8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611d00565b505050565b6000611d62826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611def9092919063ffffffff16565b9050600081511115611dea57808060200190516020811015611d8357600080fd5b8101908080519060200190929190505050611de9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061218c602a913960400191505060405180910390fd5b5b505050565b6060611dfe8484600085611e07565b90509392505050565b606082471015611e62576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806121356026913960400191505060405180910390fd5b611e6b85611faf565b611edd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310611f2c5780518252602082019150602081019050602083039250611f09565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611f8e576040519150601f19603f3d011682016040523d82523d6000602084013e611f93565b606091505b5091509150611fa3828286611fc2565b92505050949350505050565b600080823b905060008111915050919050565b60608315611fd257829050612087565b600083511115611fe55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561204c578082015181840152602081019050612031565b50505050905090810190601f1680156120795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b939250505056fe556d6272613a204d75737420706179206d6f7265207468616e2074686520746f6c6c4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373556d6272613a204e6f2062616c616e636520746f207769746864726177206f722066656520657863656564732062616c616e6365556d6272613a20496e76616c6964206f72206f7574646174656420746f6c6c20636f6d6d69746d656e74416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c556d6272613a2043616e6e6f742073656e64206d6f726520746f6b656e7320746f20737465616c746820616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212205e254d7b699170d9a1cf44ff06a3b68122013e708b2765b975079610b20853f264736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xFE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x81AB0FCD GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xB400EE46 GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xB400EE46 EQ PUSH2 0x6F9 JUMPI DUP1 PUSH4 0xB9BFABE1 EQ PUSH2 0x73A JUMPI DUP1 PUSH4 0xBEB9ADDF EQ PUSH2 0x7BC JUMPI DUP1 PUSH4 0xC0B9B4EA EQ PUSH2 0x81E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x86F JUMPI PUSH2 0xFE JUMP JUMPDEST DUP1 PUSH4 0x81AB0FCD EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x5F8 JUMPI DUP1 PUSH4 0x8EF490B0 EQ PUSH2 0x639 JUMPI DUP1 PUSH4 0xA3DACE5D EQ PUSH2 0x6BE JUMPI PUSH2 0xFE JUMP JUMPDEST DUP1 PUSH4 0x285AAA20 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x285AAA20 EQ PUSH2 0x427 JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0x452 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x4C3 JUMPI DUP1 PUSH4 0x7E8C2F94 EQ PUSH2 0x4DA JUMPI PUSH2 0xFE JUMP JUMPDEST DUP1 PUSH4 0x59CA2F5 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0xC6B7067 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0x185AD0A5 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x23D0E7A1 EQ PUSH2 0x293 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x229 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x8C0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x237 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x24E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x8D6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x291 PUSH2 0x9C9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x425 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x140 DUP2 LT ISZERO PUSH2 0x2B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x390 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xAF7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x43C PUSH2 0xB24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4C1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xB2A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4D8 PUSH2 0xB4E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EF PUSH2 0xCBB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5F6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x100 DUP2 LT ISZERO PUSH2 0x53F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xCE1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60D PUSH2 0xD2C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x645 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x65C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xD7A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70E PUSH2 0xE33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7BA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x750 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xE59 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x81C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x10AE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x86D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x841 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1242 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8BE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x892 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1335 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x8D0 CALLER DUP6 DUP6 PUSH1 0x0 DUP1 DUP8 DUP8 PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x8DE PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x985 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA8C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556D6272613A204E6F7420746F6C6C20636F6C6C6563746F7200000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xAF4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0xB09 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0xB18 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 DUP11 PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xB4A CALLER DUP4 DUP4 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1527 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB56 PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB74 PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBFD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD03 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP11 DUP11 DUP11 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0xD22 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH2 0xD82 PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDA0 PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD CALLVALUE EQ PUSH2 0xED0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556D6272613A204D757374207061792074686520657861637420746F6C6C0000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD EQ PUSH2 0xFA5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x31 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x215B PUSH1 0x31 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 0x4 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x29877766FA2BFE3B90008D6D92F965ECA91CBC5757ED775740E460799FB92219 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x10A7 DUP5 CALLER ADDRESS DUP7 PUSH2 0x1B9D JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP4 EQ PUSH2 0x1108 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x210B PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 SLOAD CALLVALUE GT PUSH2 0x1162 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x208F PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD CALLVALUE SUB SWAP1 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x29877766FA2BFE3B90008D6D92F965ECA91CBC5757ED775740E460799FB92219 DUP4 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8FC DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x123A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x124A PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1268 PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x133D PUSH2 0x18BB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x135B PUSH2 0xD2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x13E4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x146A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20B1 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP4 DUP2 GT PUSH2 0x1600 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x34 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x20D7 PUSH1 0x34 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP3 SUB SWAP1 POP PUSH1 0x4 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x30EB3583AD09933B693A45452AB07512244CDBC5868701AA004C27B7B267C249 DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x170E DUP8 DUP10 DUP4 PUSH2 0x1C5E JUMP JUMPDEST PUSH1 0x0 DUP6 GT ISZERO PUSH2 0x1723 JUMPI PUSH2 0x1722 DUP8 DUP8 DUP8 PUSH2 0x1C5E JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18B0 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x579073DE DUP3 DUP12 DUP12 DUP12 DUP12 DUP12 DUP11 PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1845 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x182A JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1872 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1897 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CHAINID SWAP1 POP PUSH1 0x0 DUP2 ADDRESS DUP13 DUP13 DUP13 DUP13 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19AD JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1992 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x19DA JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP1 PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 DUP2 MSTORE POP PUSH1 0x1C ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x1 DUP3 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1B1C JUMPI POP DUP13 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST PUSH2 0x1B8E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x556D6272613A20496E76616C6964205369676E61747572650000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1C58 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D00 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1CFB DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x1D00 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D62 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1DEF SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x1DEA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x1DE9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x218C PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1DFE DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1E07 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1E62 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2135 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1E6B DUP6 PUSH2 0x1FAF JUMP JUMPDEST PUSH2 0x1EDD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1D DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x1F2C JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x1F09 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F8E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F93 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FA3 DUP3 DUP3 DUP7 PUSH2 0x1FC2 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1FD2 JUMPI DUP3 SWAP1 POP PUSH2 0x2087 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD GT ISZERO PUSH2 0x1FE5 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x204C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2031 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x2079 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID SSTORE PUSH14 0x6272613A204D7573742070617920 PUSH14 0x6F7265207468616E207468652074 PUSH16 0x6C6C4F776E61626C653A206E6577206F PUSH24 0x6E657220697320746865207A65726F206164647265737355 PUSH14 0x6272613A204E6F2062616C616E63 PUSH6 0x20746F207769 PUSH21 0x6864726177206F7220666565206578636565647320 PUSH3 0x616C61 PUSH15 0x6365556D6272613A20496E76616C69 PUSH5 0x206F72206F PUSH22 0x74646174656420746F6C6C20636F6D6D69746D656E74 COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH10 0x6E73756666696369656E PUSH21 0x2062616C616E636520666F722063616C6C556D6272 PUSH2 0x3A20 NUMBER PUSH2 0x6E6E PUSH16 0x742073656E64206D6F726520746F6B65 PUSH15 0x7320746F20737465616C7468206164 PUSH5 0x7265737353 PUSH2 0x6665 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS KECCAK256 PUSH16 0x7065726174696F6E20646964206E6F74 KECCAK256 PUSH20 0x756363656564A26469706673582212205E254D7B PUSH10 0x9170D9A1CF44FF06A3B6 DUP2 0x22 ADD RETURNDATACOPY PUSH17 0x8B2765B975079610B20853F264736F6C63 NUMBER STOP SMOD MOD STOP CALLER ",
							"sourceMap": "1500:12436:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7804:241;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3858:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4350:159;;;;;;;;;;;;;:::i;:::-;;10142:496;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2588:19;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7158:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2988:145:0;;;;;;;;;;;;;:::i;:::-;;2705:28:7;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;8742:527;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2356:85:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;2957:68:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3623:80;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;2825:35;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;6184:584;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5188:529;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4123:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;3282:240:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;7804:241:7;7954:86;7977:10;7989:9;8000:10;8020:1;8024;8027:5;8034;7954:22;:86::i;:::-;7804:241;;;;:::o;3858:116::-;2579:12:0;:10;:12::i;:::-;2568:23;;:7;:5;:7::i;:::-;:23;;;2560:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3952:17:7::1;3936:13;;:33;;;;;;;;;;;;;;;;;;3858:116:::0;:::o;4350:159::-;4411:13;;;;;;;;;;;4397:27;;:10;:27;;;4389:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4460:12;;;;;;;;;;;:21;;:44;4482:21;4460:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4350:159::o;10142:496::-;10419:112;10446:12;10460:9;10471:10;10483:8;10493:11;10506:5;10513;10520:2;10524;10528;10419:26;:112::i;:::-;10537:96;10560:12;10574:9;10585:10;10597:8;10607:11;10620:5;10627;10537:22;:96::i;:::-;10142:496;;;;;;;;;;:::o;2588:19::-;;;;:::o;7158:181::-;7235:99;7258:10;7270:9;7281:10;7301:1;7305;7327;7235:99;;;;;;;;;;;;:22;:99::i;:::-;7158:181;;:::o;2988:145:0:-;2579:12;:10;:12::i;:::-;2568:23;;:7;:5;:7::i;:::-;:23;;;2560:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3094:1:::1;3057:40;;3078:6;::::0;::::1;;;;;;;;3057:40;;;;;;;;;;;;3124:1;3107:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;2988:145::o:0;2705:28:7:-;;;;;;;;;;;;;:::o;8742:527::-;8958:191;8992:12;9012:9;9029:10;9047:8;9063:11;9101:1;8958:191;;;;;;;;;;;;9121:2;9131;9141;8958:26;:191::i;:::-;9155:109;9178:12;9192:9;9203:10;9215:8;9225:11;9257:1;9155:109;;;;;;;;;;;;:22;:109::i;:::-;8742:527;;;;;;;;:::o;2356:85:0:-;2402:7;2428:6;;;;;;;;;;;2421:13;;2356:85;:::o;2957:68:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3623:80::-;2579:12:0;:10;:12::i;:::-;2568:23;;:7;:5;:7::i;:::-;:23;;;2560:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3690:8:7::1;3683:4;:15;;;;3623:80:::0;:::o;2825:35::-;;;;;;;;;;;;;:::o;6184:584::-;6399:4;;6386:9;:17;6378:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6492:1;6452:13;:24;6466:9;6452:24;;;;;;;;;;;;;;;:36;6477:10;6452:36;;;;;;;;;;;;;;;;:41;6444:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6593:7;6554:13;:24;6568:9;6554:24;;;;;;;;;;;;;;;:36;6579:10;6554:36;;;;;;;;;;;;;;;:46;;;;6644:10;6611:63;;6624:9;6611:63;;;6635:7;6656:4;6662:11;6611:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6681:82;6715:10;6728;6748:4;6755:7;6681:26;:82::i;:::-;6184:584;;;;;:::o;5188:529::-;5399:4;;5380:15;:23;5372:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5513:4;;5501:9;:16;5493:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5563:14;5592:4;;5580:9;:16;5563:33;;2442:42;5607:72;;5620:9;5607:72;;;5631:6;5661:4;5667:11;5607:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5686:9;:18;;:26;5705:6;5686:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5188:529;;;;;:::o;4123:120::-;2579:12:0;:10;:12::i;:::-;2568:23;;:7;:5;:7::i;:::-;:23;;;2560:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4222:16:7::1;4207:12;;:31;;;;;;;;;;;;;;;;;;4123:120:::0;:::o;3282:240:0:-;2579:12;:10;:12::i;:::-;2568:23;;:7;:5;:7::i;:::-;:23;;;2560:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3390:1:::1;3370:22;;:8;:22;;;;3362:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3479:8;3450:38;;3471:6;::::0;::::1;;;;;;;;3450:38;;;;;;;;;;;;3507:8;3498:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;3282:240:::0;:::o;11285:954:7:-;11510:15;11528:13;:27;11542:12;11528:27;;;;;;;;;;;;;;;:39;11556:10;11528:39;;;;;;;;;;;;;;;;11510:57;;11628:11;11618:7;:21;11610:86;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11703:25;11741:11;11731:7;:21;11703:49;;11765:13;:27;11779:12;11765:27;;;;;;;;;;;;;;;:39;11793:10;11765:39;;;;;;;;;;;;;;;11758:46;;;11875:10;11815:71;;11845:9;11815:71;;11831:12;11815:71;;;11856:17;11815:71;;;;;;;;;;;;;;;;;;11893:72;11923:10;11936:9;11947:17;11893:22;:72::i;:::-;11990:1;11976:11;:15;11972:101;;;12001:65;12031:10;12044:8;12054:11;12001:22;:65::i;:::-;11972:101;12109:1;12083:28;;12091:5;12083:28;;;12079:156;;12121:5;:21;;;12143:17;12162:12;12176:9;12187:10;12199:8;12209:11;12222:5;12121:107;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12079:156;11285:954;;;;;;;;;:::o;1869:104:5:-;1922:15;1956:10;1949:17;;1869:104;:::o;13127:807:7:-;13407:16;13458:9;13446:21;;13479:15;13630:8;13648:4;13655:9;13666:10;13678:8;13688:11;13709:5;13717;13619:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13596:139;;;;;;13522:223;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13503:250;;;;;;13479:274;;13760:25;13788:30;13798:7;13807:2;13811;13815;13788:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13760:58;;13861:1;13832:31;;:17;:31;;;;:68;;;;;13888:12;13867:33;;:17;:33;;;13832:68;13824:105;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13127:807;;;;;;;;;;;;;:::o;2156:203:3:-;2256:96;2276:5;2306:27;;;2335:4;2341:2;2345:5;2283:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2256:19;:96::i;:::-;2156:203;;;;:::o;1975:175::-;2057:86;2077:5;2107:23;;;2132:2;2136:5;2084:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2057:19;:86::i;:::-;1975:175;;;:::o;4238:751::-;4657:23;4683:69;4711:4;4683:69;;;;;;;;;;;;;;;;;4691:5;4683:27;;;;:69;;;;;:::i;:::-;4657:95;;4786:1;4766:10;:17;:21;4762:221;;;4906:10;4895:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4887:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4762:221;4238:751;;;:::o;4852:193:4:-;4955:12;4986:52;5008:6;5016:4;5022:1;5025:12;4986:21;:52::i;:::-;4979:59;;4852:193;;;;;:::o;5879:523::-;6006:12;6063:5;6038:21;:30;;6030:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6129:18;6140:6;6129:10;:18::i;:::-;6121:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6252:12;6266:23;6293:6;:11;;6313:5;6321:4;6293:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6251:75;;;;6343:52;6361:7;6370:10;6382:12;6343:17;:52::i;:::-;6336:59;;;;5879:523;;;;;;:::o;1997:413::-;2057:4;2260:12;2369:7;2357:20;2349:28;;2402:1;2395:4;:8;2388:15;;;1997:413;;;:::o;8362:725::-;8477:12;8505:7;8501:580;;;8535:10;8528:17;;;;8501:580;8666:1;8646:10;:17;:21;8642:429;;;8904:10;8898:17;8964:15;8951:10;8947:2;8943:19;8936:44;8853:145;9043:12;9036:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8362:725;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1736600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"collectTolls()": "infinite",
								"owner()": "1100",
								"renounceOwnership()": "24396",
								"sendEth(address,uint256,bytes32,bytes32)": "infinite",
								"sendToken(address,address,uint256,bytes32,bytes32)": "infinite",
								"setToll(uint256)": "21271",
								"setTollCollector(address)": "22087",
								"setTollReceiver(address)": "22129",
								"tokenPayments(address,address)": "1334",
								"toll()": "1028",
								"tollCollector()": "1136",
								"tollReceiver()": "1069",
								"transferOwnership(address)": "infinite",
								"withdrawToken(address,address)": "infinite",
								"withdrawTokenAndCall(address,address,address,bytes)": "infinite",
								"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)": "infinite",
								"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)": "infinite"
							},
							"internal": {
								"_validateWithdrawSignature(address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory,uint8,bytes32,bytes32)": "infinite",
								"_withdrawTokenInternal(address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1500,
									"end": 13936,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "CODESIZE",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSHSIZE",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "60"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "LT",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "tag",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 2155,
									"end": 2172,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2175,
									"end": 2187,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2175,
									"end": 2185,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2175,
									"end": 2185,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2175,
									"end": 2185,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 2175,
									"end": 2187,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2175,
									"end": 2187,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 2175,
									"end": 2187,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 2175,
									"end": 2187,
									"name": "tag",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 2175,
									"end": 2187,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2155,
									"end": 2187,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2155,
									"end": 2187,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2206,
									"end": 2215,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2203,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2197,
									"end": 2203,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2197,
									"end": 2215,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2263,
									"end": 2272,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2259,
									"end": 2260,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2230,
									"end": 2273,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2121,
									"end": 2280,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3434,
									"end": 3439,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 3427,
									"end": 3431,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 3427,
									"end": 3439,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3427,
									"end": 3439,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3427,
									"end": 3439,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 3427,
									"end": 3439,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3461,
									"end": 3475,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3458,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 3445,
									"end": 3458,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "PUSH",
									"source": 7,
									"value": "100"
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "EXP",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "MUL",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "NOT",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "MUL",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "OR",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 3445,
									"end": 3475,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3496,
									"end": 3509,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3493,
									"name": "PUSH",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 3481,
									"end": 3493,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "PUSH",
									"source": 7,
									"value": "100"
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "EXP",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "MUL",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "NOT",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "PUSH",
									"source": 7,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "MUL",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "OR",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 3481,
									"end": 3509,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 3323,
									"end": 3514,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1869,
									"end": 1973,
									"name": "tag",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 1869,
									"end": 1973,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 1922,
									"end": 1937,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 1956,
									"end": 1966,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 1949,
									"end": 1966,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1949,
									"end": 1966,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 1869,
									"end": 1973,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1869,
									"end": 1973,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "tag",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1500,
									"end": 13936,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205e254d7b699170d9a1cf44ff06a3b68122013e708b2765b975079610b20853f264736f6c63430007060033",
									".code": [
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "81AB0FCD"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "B400EE46"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "B400EE46"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "B9BFABE1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "BEB9ADDF"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "C0B9B4EA"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "81AB0FCD"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "8EF490B0"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "A3DACE5D"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "285AAA20"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "285AAA20"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "3AEAC4E1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "7E8C2F94"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "59CA2F5"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "C6B7067"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "185AD0A5"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "23D0E7A1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1500,
											"end": 13936,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "100000000"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "100000000"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "tag",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "tag",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "tag",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "100000000"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "100000000"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATACOPY",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "tag",
											"source": 7,
											"value": "43"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "tag",
											"source": 7,
											"value": "46"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "tag",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "tag",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "tag",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "tag",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "tag",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "tag",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "tag",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "A0"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "tag",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "tag",
											"source": 7,
											"value": "74"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "tag",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "tag",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "tag",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7954,
											"end": 8040,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 7977,
											"end": 7987,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 7989,
											"end": 7998,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 8000,
											"end": 8010,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 8020,
											"end": 8021,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8024,
											"end": 8025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8027,
											"end": 8032,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 8034,
											"end": 8039,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 7954,
											"end": 7976,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 7954,
											"end": 8040,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7954,
											"end": 8040,
											"name": "tag",
											"source": 7,
											"value": "89"
										},
										{
											"begin": 7954,
											"end": 8040,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7804,
											"end": 8045,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 2579,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "tag",
											"source": 0,
											"value": "92"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2568,
											"end": 2573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3952,
											"end": 3969,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3949,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3936,
											"end": 3949,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3936,
											"end": 3969,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3858,
											"end": 3974,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4411,
											"end": 4424,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4397,
											"end": 4424,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4397,
											"end": 4424,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4397,
											"end": 4407,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4397,
											"end": 4424,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4397,
											"end": 4424,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4397,
											"end": 4424,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "556D6272613A204E6F7420746F6C6C20636F6C6C6563746F7200000000000000"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 4389,
											"end": 4454,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4460,
											"end": 4472,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4481,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4460,
											"end": 4481,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "PUSH",
											"source": 7,
											"value": "8FC"
										},
										{
											"begin": 4482,
											"end": 4503,
											"name": "SELFBALANCE",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "tag",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4460,
											"end": 4504,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4350,
											"end": 4509,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "tag",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10419,
											"end": 10531,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 10446,
											"end": 10458,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10460,
											"end": 10469,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10471,
											"end": 10481,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10483,
											"end": 10491,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10493,
											"end": 10504,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10506,
											"end": 10511,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10513,
											"end": 10518,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10520,
											"end": 10522,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10524,
											"end": 10526,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10528,
											"end": 10530,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10419,
											"end": 10445,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 10419,
											"end": 10531,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10419,
											"end": 10531,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 10419,
											"end": 10531,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10537,
											"end": 10633,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 10560,
											"end": 10572,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10574,
											"end": 10583,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10585,
											"end": 10595,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10597,
											"end": 10605,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10607,
											"end": 10618,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10620,
											"end": 10625,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10627,
											"end": 10632,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 10537,
											"end": 10559,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 10537,
											"end": 10633,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 10537,
											"end": 10633,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 10537,
											"end": 10633,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 10142,
											"end": 10638,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2588,
											"end": 2607,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 7258,
											"end": 7268,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 7270,
											"end": 7279,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7281,
											"end": 7291,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 7301,
											"end": 7302,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7305,
											"end": 7306,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7327,
											"end": 7328,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7235,
											"end": 7257,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 7235,
											"end": 7334,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 7158,
											"end": 7339,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 2579,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2568,
											"end": 2573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3094,
											"end": 3095,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3078,
											"end": 3084,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3057,
											"end": 3097,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 3124,
											"end": 3125,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3107,
											"end": 3113,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3113,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3107,
											"end": 3126,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2988,
											"end": 3133,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2705,
											"end": 2733,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 8992,
											"end": 9004,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9012,
											"end": 9021,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9029,
											"end": 9039,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9047,
											"end": 9055,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9063,
											"end": 9074,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9101,
											"end": 9102,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9121,
											"end": 9123,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 9131,
											"end": 9133,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 9141,
											"end": 9143,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 8958,
											"end": 8984,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "tag",
											"source": 7,
											"value": "113"
										},
										{
											"begin": 8958,
											"end": 9149,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 9178,
											"end": 9190,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9192,
											"end": 9201,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9203,
											"end": 9213,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9215,
											"end": 9223,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9225,
											"end": 9236,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 9257,
											"end": 9258,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 9155,
											"end": 9177,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "tag",
											"source": 7,
											"value": "114"
										},
										{
											"begin": 9155,
											"end": 9264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8742,
											"end": 9269,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2402,
											"end": 2409,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2428,
											"end": 2434,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2434,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2421,
											"end": 2434,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2356,
											"end": 2441,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2957,
											"end": 3025,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2579,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 2568,
											"end": 2573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "tag",
											"source": 0,
											"value": "118"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3690,
											"end": 3698,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3683,
											"end": 3687,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3683,
											"end": 3698,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3683,
											"end": 3698,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3683,
											"end": 3698,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3683,
											"end": 3698,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3623,
											"end": 3703,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "tag",
											"source": 7,
											"value": "73"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2860,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "tag",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6399,
											"end": 6403,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 6399,
											"end": 6403,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6386,
											"end": 6395,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 6386,
											"end": 6403,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "1E"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "556D6272613A204D757374207061792074686520657861637420746F6C6C0000"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "tag",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 6378,
											"end": 6438,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6492,
											"end": 6493,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6452,
											"end": 6465,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6466,
											"end": 6475,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6452,
											"end": 6476,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6477,
											"end": 6487,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6488,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 6452,
											"end": 6493,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH data",
											"source": 7,
											"value": "91B974C51D0AA6487A00D9C7A5B1A24D189AA620F85343B127C7CF92D6ABC644"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "CODECOPY",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "tag",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 6444,
											"end": 6547,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6593,
											"end": 6600,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6567,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6568,
											"end": 6577,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6554,
											"end": 6578,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6579,
											"end": 6589,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 6554,
											"end": 6590,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6600,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6600,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6600,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 6554,
											"end": 6600,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6644,
											"end": 6654,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6624,
											"end": 6633,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "29877766FA2BFE3B90008D6D92F965ECA91CBC5757ED775740E460799FB92219"
										},
										{
											"begin": 6635,
											"end": 6642,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6656,
											"end": 6660,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6662,
											"end": 6673,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 6611,
											"end": 6674,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 6681,
											"end": 6763,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 6715,
											"end": 6725,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 6728,
											"end": 6738,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 6748,
											"end": 6752,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 6755,
											"end": 6762,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 6681,
											"end": 6707,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 6681,
											"end": 6763,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 6681,
											"end": 6763,
											"name": "tag",
											"source": 7,
											"value": "124"
										},
										{
											"begin": 6681,
											"end": 6763,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 6184,
											"end": 6768,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5399,
											"end": 5403,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5399,
											"end": 5403,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5380,
											"end": 5395,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5380,
											"end": 5403,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH data",
											"source": 7,
											"value": "3BA2500259AAF08C491D20E45C71E26C1F3D2F4807D550AF7CCCFC731DCBADCB"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "2A"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "CODECOPY",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "tag",
											"source": 7,
											"value": "127"
										},
										{
											"begin": 5372,
											"end": 5450,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5513,
											"end": 5517,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5513,
											"end": 5517,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5501,
											"end": 5510,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 5501,
											"end": 5517,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH data",
											"source": 7,
											"value": "CA1233B01ABAABBDB94E9011F33E8AA8820481688DCDB39C067911CAE56DFA"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "CODECOPY",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "tag",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 5493,
											"end": 5556,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5563,
											"end": 5577,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5592,
											"end": 5596,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 5592,
											"end": 5596,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 5580,
											"end": 5589,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 5580,
											"end": 5596,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5563,
											"end": 5596,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5563,
											"end": 5596,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2442,
											"end": 2484,
											"name": "PUSH",
											"source": 7,
											"value": "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5620,
											"end": 5629,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "29877766FA2BFE3B90008D6D92F965ECA91CBC5757ED775740E460799FB92219"
										},
										{
											"begin": 5631,
											"end": 5637,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5661,
											"end": 5665,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 5667,
											"end": 5678,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5607,
											"end": 5679,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5695,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5704,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5686,
											"end": 5704,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "PUSH",
											"source": 7,
											"value": "8FC"
										},
										{
											"begin": 5705,
											"end": 5711,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "tag",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 5686,
											"end": 5712,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 5188,
											"end": 5717,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "tag",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2579,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2568,
											"end": 2573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "tag",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4222,
											"end": 4238,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4219,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 4207,
											"end": 4219,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4207,
											"end": 4238,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 4123,
											"end": 4243,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 2579,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "93"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "tag",
											"source": 0,
											"value": "137"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 2568,
											"end": 2573,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "tag",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 2568,
											"end": 2575,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2568,
											"end": 2591,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 2560,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3390,
											"end": 3391,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3370,
											"end": 3392,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3370,
											"end": 3392,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3370,
											"end": 3378,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3370,
											"end": 3392,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3370,
											"end": 3392,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3370,
											"end": 3392,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3370,
											"end": 3392,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH data",
											"source": 0,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 3362,
											"end": 3435,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3479,
											"end": 3487,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3471,
											"end": 3477,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3450,
											"end": 3488,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 3507,
											"end": 3515,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3504,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3498,
											"end": 3504,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3498,
											"end": 3515,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3282,
											"end": 3522,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "tag",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11510,
											"end": 11525,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11528,
											"end": 11541,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11542,
											"end": 11554,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11528,
											"end": 11555,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11556,
											"end": 11566,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11528,
											"end": 11567,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 11510,
											"end": 11567,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11510,
											"end": 11567,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11628,
											"end": 11639,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11618,
											"end": 11625,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11618,
											"end": 11639,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH data",
											"source": 7,
											"value": "328B8850D4C62D9BA870E891ED4B84C12BCFB70602A6A87DB8F71BFE7C2B366F"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "CODECOPY",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 11610,
											"end": 11696,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11703,
											"end": 11728,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11741,
											"end": 11752,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11731,
											"end": 11738,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11731,
											"end": 11752,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11703,
											"end": 11752,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11703,
											"end": 11752,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11778,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11779,
											"end": 11791,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11765,
											"end": 11792,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11793,
											"end": 11803,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11765,
											"end": 11804,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 11758,
											"end": 11804,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11758,
											"end": 11804,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11758,
											"end": 11804,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 11875,
											"end": 11885,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11845,
											"end": 11854,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11831,
											"end": 11843,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "30EB3583AD09933B693A45452AB07512244CDBC5868701AA004C27B7B267C249"
										},
										{
											"begin": 11856,
											"end": 11873,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 11815,
											"end": 11886,
											"name": "LOG4",
											"source": 7
										},
										{
											"begin": 11893,
											"end": 11965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 11923,
											"end": 11933,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 11936,
											"end": 11945,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 11947,
											"end": 11964,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 11893,
											"end": 11915,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 11893,
											"end": 11965,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 11893,
											"end": 11965,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 11893,
											"end": 11965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11990,
											"end": 11991,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 11976,
											"end": 11987,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 11976,
											"end": 11991,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 11972,
											"end": 12073,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 11972,
											"end": 12073,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 11972,
											"end": 12073,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12001,
											"end": 12066,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 12031,
											"end": 12041,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 12044,
											"end": 12052,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 12054,
											"end": 12065,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 12001,
											"end": 12023,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 12001,
											"end": 12066,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 12001,
											"end": 12066,
											"name": "tag",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 12001,
											"end": 12066,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11972,
											"end": 12073,
											"name": "tag",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 11972,
											"end": 12073,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12109,
											"end": 12110,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12083,
											"end": 12111,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12083,
											"end": 12111,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12091,
											"end": 12096,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 12083,
											"end": 12111,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12083,
											"end": 12111,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12083,
											"end": 12111,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 12079,
											"end": 12235,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 12079,
											"end": 12235,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12126,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12142,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12121,
											"end": 12142,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12142,
											"name": "PUSH",
											"source": 7,
											"value": "579073DE"
										},
										{
											"begin": 12143,
											"end": 12160,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12162,
											"end": 12174,
											"name": "DUP12",
											"source": 7
										},
										{
											"begin": 12176,
											"end": 12185,
											"name": "DUP12",
											"source": 7
										},
										{
											"begin": 12187,
											"end": 12197,
											"name": "DUP12",
											"source": 7
										},
										{
											"begin": 12199,
											"end": 12207,
											"name": "DUP12",
											"source": 7
										},
										{
											"begin": 12209,
											"end": 12220,
											"name": "DUP12",
											"source": 7
										},
										{
											"begin": 12222,
											"end": 12227,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFF"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SHL",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "tag",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "tag",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "tag",
											"source": 7,
											"value": "152"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SWAP9",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "tag",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "tag",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12121,
											"end": 12228,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 12079,
											"end": 12235,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 12079,
											"end": 12235,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 11285,
											"end": 12239,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1869,
											"end": 1973,
											"name": "tag",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 1869,
											"end": 1973,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1922,
											"end": 1937,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1956,
											"end": 1966,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1949,
											"end": 1966,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1949,
											"end": 1966,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1869,
											"end": 1973,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1869,
											"end": 1973,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "tag",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13407,
											"end": 13423,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13458,
											"end": 13467,
											"name": "CHAINID",
											"source": 7
										},
										{
											"begin": 13446,
											"end": 13467,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13446,
											"end": 13467,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13479,
											"end": 13494,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13630,
											"end": 13638,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13648,
											"end": 13652,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 13655,
											"end": 13664,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 13666,
											"end": 13676,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 13678,
											"end": 13686,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 13688,
											"end": 13699,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 13709,
											"end": 13714,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 13717,
											"end": 13722,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "tag",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "tag",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "EXP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "tag",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP10",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13619,
											"end": 13723,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13596,
											"end": 13735,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13596,
											"end": 13735,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13596,
											"end": 13735,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13596,
											"end": 13735,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13596,
											"end": 13735,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13596,
											"end": 13735,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "19457468657265756D205369676E6564204D6573736167653A0A333200000000"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "1C"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13522,
											"end": 13745,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13503,
											"end": 13753,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13503,
											"end": 13753,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13503,
											"end": 13753,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13503,
											"end": 13753,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13503,
											"end": 13753,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13503,
											"end": 13753,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 13479,
											"end": 13753,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13479,
											"end": 13753,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13760,
											"end": 13785,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 13798,
											"end": 13805,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13807,
											"end": 13809,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 13811,
											"end": 13813,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 13815,
											"end": 13817,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13788,
											"end": 13818,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13760,
											"end": 13818,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13760,
											"end": 13818,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13861,
											"end": 13862,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 13832,
											"end": 13863,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13832,
											"end": 13863,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13849,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13863,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13832,
											"end": 13863,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13863,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13863,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13900,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13900,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13900,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 13832,
											"end": 13900,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13900,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13888,
											"end": 13900,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 13867,
											"end": 13900,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13867,
											"end": 13900,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13867,
											"end": 13884,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13867,
											"end": 13900,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 13867,
											"end": 13900,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 13867,
											"end": 13900,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 13832,
											"end": 13900,
											"name": "tag",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 13832,
											"end": 13900,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "556D6272613A20496E76616C6964205369676E61747572650000000000000000"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "tag",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 13824,
											"end": 13929,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 13127,
											"end": 13934,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2156,
											"end": 2359,
											"name": "tag",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 2156,
											"end": 2359,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2256,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 2276,
											"end": 2281,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2306,
											"end": 2333,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 2306,
											"end": 2333,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 2306,
											"end": 2333,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 2335,
											"end": 2339,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2343,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2345,
											"end": 2350,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2283,
											"end": 2351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2256,
											"end": 2275,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 2256,
											"end": 2352,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2256,
											"end": 2352,
											"name": "tag",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 2256,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2156,
											"end": 2359,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2156,
											"end": 2359,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2156,
											"end": 2359,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2156,
											"end": 2359,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2156,
											"end": 2359,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1975,
											"end": 2150,
											"name": "tag",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 1975,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2057,
											"end": 2143,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 2077,
											"end": 2082,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2107,
											"end": 2130,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 2107,
											"end": 2130,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 2107,
											"end": 2130,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 2132,
											"end": 2134,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2136,
											"end": 2141,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2084,
											"end": 2142,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2057,
											"end": 2076,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 2057,
											"end": 2143,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 2057,
											"end": 2143,
											"name": "tag",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 2057,
											"end": 2143,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1975,
											"end": 2150,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1975,
											"end": 2150,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1975,
											"end": 2150,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1975,
											"end": 2150,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4238,
											"end": 4989,
											"name": "tag",
											"source": 3,
											"value": "168"
										},
										{
											"begin": 4238,
											"end": 4989,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4657,
											"end": 4680,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 4711,
											"end": 4715,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4691,
											"end": 4696,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "173"
										},
										{
											"begin": 4683,
											"end": 4710,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "tag",
											"source": 3,
											"value": "172"
										},
										{
											"begin": 4683,
											"end": 4752,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4657,
											"end": 4752,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4657,
											"end": 4752,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4786,
											"end": 4787,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4766,
											"end": 4776,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4766,
											"end": 4783,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4766,
											"end": 4787,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 4762,
											"end": 4983,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4762,
											"end": 4983,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 4762,
											"end": 4983,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4906,
											"end": 4916,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "tag",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4895,
											"end": 4925,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "2A"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH data",
											"source": 3,
											"value": "E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "2A"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "CODECOPY",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "tag",
											"source": 3,
											"value": "176"
										},
										{
											"begin": 4887,
											"end": 4972,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4762,
											"end": 4983,
											"name": "tag",
											"source": 3,
											"value": "174"
										},
										{
											"begin": 4762,
											"end": 4983,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4238,
											"end": 4989,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4238,
											"end": 4989,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4238,
											"end": 4989,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4238,
											"end": 4989,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "tag",
											"source": 4,
											"value": "173"
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4955,
											"end": 4967,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4986,
											"end": 5038,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 5008,
											"end": 5014,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5016,
											"end": 5020,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5022,
											"end": 5023,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5025,
											"end": 5037,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4986,
											"end": 5007,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "179"
										},
										{
											"begin": 4986,
											"end": 5038,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4986,
											"end": 5038,
											"name": "tag",
											"source": 4,
											"value": "178"
										},
										{
											"begin": 4986,
											"end": 5038,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4979,
											"end": 5038,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4979,
											"end": 5038,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4852,
											"end": 5045,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "tag",
											"source": 4,
											"value": "179"
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6006,
											"end": 6018,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 6063,
											"end": 6068,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6038,
											"end": 6059,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 6038,
											"end": 6068,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 6038,
											"end": 6068,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH data",
											"source": 4,
											"value": "565F1A77334FC4792800921178C71E4521ACFFAB18FF9E7885B49377EE80AB4C"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "26"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "CODECOPY",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "tag",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 6030,
											"end": 6111,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6129,
											"end": 6147,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 6140,
											"end": 6146,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6129,
											"end": 6139,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 6129,
											"end": 6147,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6129,
											"end": 6147,
											"name": "tag",
											"source": 4,
											"value": "182"
										},
										{
											"begin": 6129,
											"end": 6147,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "1D"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "tag",
											"source": 4,
											"value": "184"
										},
										{
											"begin": 6121,
											"end": 6181,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6252,
											"end": 6264,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6266,
											"end": 6289,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6299,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6304,
											"name": "PUSH",
											"source": 4,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6293,
											"end": 6304,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6313,
											"end": 6318,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6321,
											"end": 6325,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "tag",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "187"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "185"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "tag",
											"source": 4,
											"value": "187"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "OR",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "190"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "189"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "tag",
											"source": 4,
											"value": "190"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "tag",
											"source": 4,
											"value": "189"
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6293,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6251,
											"end": 6326,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6251,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6251,
											"end": 6326,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6251,
											"end": 6326,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6343,
											"end": 6395,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "191"
										},
										{
											"begin": 6361,
											"end": 6368,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6370,
											"end": 6380,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6382,
											"end": 6394,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 6343,
											"end": 6360,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 6343,
											"end": 6395,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 6343,
											"end": 6395,
											"name": "tag",
											"source": 4,
											"value": "191"
										},
										{
											"begin": 6343,
											"end": 6395,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6336,
											"end": 6395,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 6336,
											"end": 6395,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6336,
											"end": 6395,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 6336,
											"end": 6395,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5879,
											"end": 6402,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 1997,
											"end": 2410,
											"name": "tag",
											"source": 4,
											"value": "183"
										},
										{
											"begin": 1997,
											"end": 2410,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2057,
											"end": 2061,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2260,
											"end": 2272,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 2369,
											"end": 2376,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 2357,
											"end": 2377,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 2349,
											"end": 2377,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2349,
											"end": 2377,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2402,
											"end": 2403,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 2395,
											"end": 2399,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 2395,
											"end": 2403,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 2388,
											"end": 2403,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1997,
											"end": 2410,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 1997,
											"end": 2410,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1997,
											"end": 2410,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 1997,
											"end": 2410,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "tag",
											"source": 4,
											"value": "192"
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8477,
											"end": 8489,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 8505,
											"end": 8512,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8501,
											"end": 9081,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8501,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "195"
										},
										{
											"begin": 8501,
											"end": 9081,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8535,
											"end": 8545,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8528,
											"end": 8545,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 8528,
											"end": 8545,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8528,
											"end": 8545,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "194"
										},
										{
											"begin": 8528,
											"end": 8545,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 8501,
											"end": 9081,
											"name": "tag",
											"source": 4,
											"value": "195"
										},
										{
											"begin": 8501,
											"end": 9081,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8666,
											"end": 8667,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 8646,
											"end": 8656,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 8646,
											"end": 8663,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8646,
											"end": 8667,
											"name": "GT",
											"source": 4
										},
										{
											"begin": 8642,
											"end": 9071,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8642,
											"end": 9071,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "197"
										},
										{
											"begin": 8642,
											"end": 9071,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8904,
											"end": 8914,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 8898,
											"end": 8915,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 8964,
											"end": 8979,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 8951,
											"end": 8961,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 8947,
											"end": 8949,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 8943,
											"end": 8962,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 8936,
											"end": 8980,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8853,
											"end": 8998,
											"name": "tag",
											"source": 4,
											"value": "197"
										},
										{
											"begin": 8853,
											"end": 8998,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9043,
											"end": 9055,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "tag",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "199"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "tag",
											"source": 4,
											"value": "201"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "100"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "EXP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "tag",
											"source": 4,
											"value": "202"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 9036,
											"end": 9056,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "tag",
											"source": 4,
											"value": "194"
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 8362,
											"end": 9087,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"328B8850D4C62D9BA870E891ED4B84C12BCFB70602A6A87DB8F71BFE7C2B366F": "556d6272613a204e6f2062616c616e636520746f207769746864726177206f722066656520657863656564732062616c616e6365",
										"3BA2500259AAF08C491D20E45C71E26C1F3D2F4807D550AF7CCCFC731DCBADCB": "556d6272613a20496e76616c6964206f72206f7574646174656420746f6c6c20636f6d6d69746d656e74",
										"565F1A77334FC4792800921178C71E4521ACFFAB18FF9E7885B49377EE80AB4C": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
										"91B974C51D0AA6487A00D9C7A5B1A24D189AA620F85343B127C7CF92D6ABC644": "556d6272613a2043616e6e6f742073656e64206d6f726520746f6b656e7320746f20737465616c74682061646472657373",
										"CA1233B01ABAABBDB94E9011F33E8AA8820481688DCDB39C067911CAE56DFA": "556d6272613a204d75737420706179206d6f7265207468616e2074686520746f6c6c",
										"E11AD79D1E4A7F2E5F376964CB99E8E8F7904E3FC16A109F7A7ECB9AA7956DCD": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564"
									}
								}
							}
						},
						"methodIdentifiers": {
							"collectTolls()": "185ad0a5",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"sendEth(address,uint256,bytes32,bytes32)": "beb9addf",
							"sendToken(address,address,uint256,bytes32,bytes32)": "b9bfabe1",
							"setToll(uint256)": "a3dace5d",
							"setTollCollector(address)": "0c6b7067",
							"setTollReceiver(address)": "c0b9b4ea",
							"tokenPayments(address,address)": "8ef490b0",
							"toll()": "285aaa20",
							"tollCollector()": "7e8c2f94",
							"tollReceiver()": "b400ee46",
							"transferOwnership(address)": "f2fde38b",
							"withdrawToken(address,address)": "3aeac4e1",
							"withdrawTokenAndCall(address,address,address,bytes)": "059ca2f5",
							"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)": "23d0e7a1",
							"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)": "81ab0fcd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toll\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tollCollector\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_tollReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"pkx\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ciphertext\",\"type\":\"bytes32\"}],\"name\":\"Announcement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"acceptor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenWithdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectTolls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tollCommitment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_pkx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_ciphertext\",\"type\":\"bytes32\"}],\"name\":\"sendEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_pkx\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_ciphertext\",\"type\":\"bytes32\"}],\"name\":\"sendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newToll\",\"type\":\"uint256\"}],\"name\":\"setToll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTollCollector\",\"type\":\"address\"}],\"name\":\"setTollCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newTollReceiver\",\"type\":\"address\"}],\"name\":\"setTollReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tollCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tollReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"contract IUmbraHookReceiver\",\"name\":\"_hook\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"withdrawTokenAndCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stealthAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sponsorFee\",\"type\":\"uint256\"},{\"internalType\":\"contract IUmbraHookReceiver\",\"name\":\"_hook\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdrawTokenAndCallOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stealthAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_acceptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sponsorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"withdrawTokenOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_toll\":\"Amount of ETH required per send\",\"_tollCollector\":\"Address that can sweep collected funds\",\"_tollReceiver\":\"Address that receives collected funds\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendEth(address,uint256,bytes32,bytes32)\":{\"params\":{\"_ciphertext\":\"Encrypted entropy (used to generated the stealth address) and payload extension\",\"_pkx\":\"X-coordinate of the ephemeral public key used to encrypt the payload\",\"_receiver\":\"Stealth address receiving the payment\",\"_tollCommitment\":\"Exact toll the sender is paying; should equal contract toll; the committment is used to prevent frontrunning attacks by the owner; see https://github.com/ScopeLift/umbra-protocol/issues/54 for more information\"}},\"sendToken(address,address,uint256,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of the token to send, in its own base units\",\"_ciphertext\":\"Encrypted entropy (used to generated the stealth address) and payload extension\",\"_pkx\":\"X-coordinate of the ephemeral public key used to encrypt the payload\",\"_receiver\":\"Stealth address receiving the payment\",\"_tokenAddr\":\"Address of the ERC20 token being sent\"}},\"setToll(uint256)\":{\"params\":{\"_newToll\":\"New ETH toll in wei\"}},\"setTollCollector(address)\":{\"params\":{\"_newTollCollector\":\"New address which has fund sweeping privileges\"}},\"setTollReceiver(address)\":{\"params\":{\"_newTollReceiver\":\"New address which receives collected funds\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawToken(address,address)\":{\"details\":\"This method must be directly called by the stealth address\",\"params\":{\"_acceptor\":\"Address where withdrawn funds should be sent\",\"_tokenAddr\":\"Address of the ERC20 token being withdrawn\"}},\"withdrawTokenAndCall(address,address,address,bytes)\":{\"details\":\"This method must be directly called by the stealth address\",\"params\":{\"_acceptor\":\"Address where withdrawn funds should be sent\",\"_data\":\"Arbitrary data that will be passed to the post-withdraw hook contract\",\"_hook\":\"Contract that will be called after the token withdrawal has completed\",\"_tokenAddr\":\"Address of the ERC20 token being withdrawn\"}},\"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)\":{\"params\":{\"_acceptor\":\"Address where withdrawn funds should be sent\",\"_data\":\"Arbitrary data that will be passed to the post-withdraw hook contract\",\"_hook\":\"Contract that will be called after the token withdrawal has completed\",\"_r\":\"ECDSA signature component: x-coordinate of `R`\",\"_s\":\"ECDSA signature component: `s` value of the signature\",\"_sponsor\":\"Address which is compensated for submitting the withdrawal tx\",\"_sponsorFee\":\"Amount of the token to pay to the sponsor\",\"_stealthAddr\":\"The stealth address whose token balance will be withdrawn\",\"_tokenAddr\":\"Address of the ERC20 token being withdrawn\",\"_v\":\"ECDSA signature component: Parity of the `y` coordinate of point `R`\"}},\"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_acceptor\":\"Address where withdrawn funds should be sent\",\"_r\":\"ECDSA signature component: x-coordinate of `R`\",\"_s\":\"ECDSA signature component: `s` value of the signature\",\"_sponsor\":\"Address which is compensated for submitting the withdrawal tx\",\"_sponsorFee\":\"Amount of the token to pay to the sponsor\",\"_stealthAddr\":\"The stealth address whose token balance will be withdrawn\",\"_tokenAddr\":\"Address of the ERC20 token being withdrawn\",\"_v\":\"ECDSA signature component: Parity of the `y` coordinate of point `R`\"}}},\"stateVariables\":{\"ETH_TOKEN_PLACHOLDER\":{\"details\":\"Placeholder address used to identify transfer of native ETH\"}},\"version\":1},\"userdoc\":{\"events\":{\"Announcement(address,uint256,address,bytes32,bytes32)\":{\"notice\":\"Emitted when a payment is sent\"},\"TokenWithdrawal(address,address,uint256,address)\":{\"notice\":\"Emitted when a token is withdrawn\"}},\"kind\":\"user\",\"methods\":{\"collectTolls()\":{\"notice\":\"Function only the toll collector can call to sweep funds to the toll receiver\"},\"sendEth(address,uint256,bytes32,bytes32)\":{\"notice\":\"Send and announce ETH payment to a stealth address\"},\"sendToken(address,address,uint256,bytes32,bytes32)\":{\"notice\":\"Send and announce an ERC20 payment to a stealth address\"},\"setToll(uint256)\":{\"notice\":\"Admin only function to update the toll\"},\"setTollCollector(address)\":{\"notice\":\"Admin only function to update the toll collector\"},\"setTollReceiver(address)\":{\"notice\":\"Admin only function to update the toll receiver\"},\"tokenPayments(address,address)\":{\"notice\":\"Token payments pending withdrawal; stealth address => token address => amount\"},\"toll()\":{\"notice\":\"An ETH amount that must be sent alongside each payment; used as an anti-spam measure\"},\"tollCollector()\":{\"notice\":\"A privileged address, set by the admin, that can sweep all collected ETH tolls\"},\"tollReceiver()\":{\"notice\":\"The address where ETH funds are sent when collected by the tollCollector\"},\"withdrawToken(address,address)\":{\"notice\":\"Withdraw an ERC20 token payment sent to a stealth address\"},\"withdrawTokenAndCall(address,address,address,bytes)\":{\"notice\":\"Withdraw an ERC20 token payment sent to a stealth address\"},\"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)\":{\"notice\":\"Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization\"},\"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Umbra-Cash/contracts/Umbra.sol\":\"Umbra\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x089197413eb3c21043b9d41d9673750ee2e5a30d80329c0f64de3f18e28adc74\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82f9ae19cf96921184346db1997d5fcc14860d69427eff0e2d34fd8fdd6003ab\",\"dweb:/ipfs/QmXTPWQzemS7Eb8ehFfNyGHDDxaDtujXoPhVkED4ASzpTF\"]},\"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xed84f952d9565c4fc3690a3c7f295ae401f14d3e952ef104ef991f272127b5dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54f04c5b3bad1b034e0164b453b326fdddbb067664c2255d79b266bccff3b7d7\",\"dweb:/ipfs/Qmb83oMdU7UtMZ8YbnxmP8CDc8rgQFzWQDN3uoAwPDyRRQ\"]},\"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x702e70ef0f67b8a45db9bdccdbe3eb1de654d4c8c93503df15784d0964046ff6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e852c6eddd2a3889f99be4b591be57177d2a00bb0c2e0585f2af8e96b7e480fc\",\"dweb:/ipfs/QmRSosgbTfUYW7g3mA6Sy8ydsMGQRWKypWxbqLPe5UgjAN\"]},\"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"keccak256\":\"0x88c47dd07640b0c558afd43ab1003cb600f087dbecdac2869315ccab26170e4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ed3e6e96547fa60a297b3166919e247242969da0c906482baec9d9130f438e60\",\"dweb:/ipfs/QmQ7SD1Hoc7eNtsrgSb7FFjdNM4WgVyThzXUT4uQ8S7QbZ\"]},\"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ca24a00c51df6788692e84c47dd1c4d59f78dd74bf34a53a648739e10f1cbff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://988aeb7ea692f2092505048dfa69d67d17ab305574d90e7ff1994417c954e1a2\",\"dweb:/ipfs/QmXAP6thCWwKu1sG7YzLDcLqXinNpQejpzTAB5bJPuzwnG\"]},\"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x0e92b627582fd191d8db7901cba59e29b57059716e53b5034ef8977357c3244a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://54c37e6816bd5730227bcb2553dd74d9ed0d4b513485375d644061bc98d3d08e\",\"dweb:/ipfs/QmQ67ZbMnJovZCpgtPbfPQms1ZfWHD5mkaEiy6YrnQvCLD\"]},\"Umbra-Cash/contracts/IUmbraHookReceiver.sol\":{\"keccak256\":\"0x6bc3a87d2729ee3ecbd67c304a8d8ef7f6389260671a2300af791cc225869f71\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://317b0cfc37c221d9d3417165bb1af86ef9bb905333738cc327b4faf639dead2e\",\"dweb:/ipfs/QmeiRRRtwgUYhsi8FrMmG2qyNm2Lr2cjYeTL2sxFChtRMC\"]},\"Umbra-Cash/contracts/Umbra.sol\":{\"keccak256\":\"0xc057fac05cd46c7d4e7a08459f35019a0b2f376bd257bd0a57b22c2d6b1542fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://091cca2cd071c80d8dafa48fa0ef8de3fb895b2a54f3102821acbad2f3f784d7\",\"dweb:/ipfs/QmQbzpw8LAWoPWf8R8eHYphXdjyvM54oYrLMhPcK6MTbRy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "Umbra-Cash/contracts/Umbra.sol:Umbra",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1134,
								"contract": "Umbra-Cash/contracts/Umbra.sol:Umbra",
								"label": "toll",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1137,
								"contract": "Umbra-Cash/contracts/Umbra.sol:Umbra",
								"label": "tollCollector",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 1140,
								"contract": "Umbra-Cash/contracts/Umbra.sol:Umbra",
								"label": "tollReceiver",
								"offset": 0,
								"slot": "3",
								"type": "t_address_payable"
							},
							{
								"astId": 1147,
								"contract": "Umbra-Cash/contracts/Umbra.sol:Umbra",
								"label": "tokenPayments",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"Announcement(address,uint256,address,bytes32,bytes32)": {
								"notice": "Emitted when a payment is sent"
							},
							"TokenWithdrawal(address,address,uint256,address)": {
								"notice": "Emitted when a token is withdrawn"
							}
						},
						"kind": "user",
						"methods": {
							"collectTolls()": {
								"notice": "Function only the toll collector can call to sweep funds to the toll receiver"
							},
							"sendEth(address,uint256,bytes32,bytes32)": {
								"notice": "Send and announce ETH payment to a stealth address"
							},
							"sendToken(address,address,uint256,bytes32,bytes32)": {
								"notice": "Send and announce an ERC20 payment to a stealth address"
							},
							"setToll(uint256)": {
								"notice": "Admin only function to update the toll"
							},
							"setTollCollector(address)": {
								"notice": "Admin only function to update the toll collector"
							},
							"setTollReceiver(address)": {
								"notice": "Admin only function to update the toll receiver"
							},
							"tokenPayments(address,address)": {
								"notice": "Token payments pending withdrawal; stealth address => token address => amount"
							},
							"toll()": {
								"notice": "An ETH amount that must be sent alongside each payment; used as an anti-spam measure"
							},
							"tollCollector()": {
								"notice": "A privileged address, set by the admin, that can sweep all collected ETH tolls"
							},
							"tollReceiver()": {
								"notice": "The address where ETH funds are sent when collected by the tollCollector"
							},
							"withdrawToken(address,address)": {
								"notice": "Withdraw an ERC20 token payment sent to a stealth address"
							},
							"withdrawTokenAndCall(address,address,address,bytes)": {
								"notice": "Withdraw an ERC20 token payment sent to a stealth address"
							},
							"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)": {
								"notice": "Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization"
							},
							"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)": {
								"notice": "Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization"
							}
						},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2462",
				"formattedMessage": "Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol:41:5: Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n    constructor () internal {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
				"message": "Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.",
				"severity": "warning",
				"sourceLocation": {
					"end": 2280,
					"file": "Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol",
					"start": 2121
				},
				"type": "Warning"
			}
		],
		"sources": {
			"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1074
						],
						"Ownable": [
							109
						]
					},
					"id": 110,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:31:0"
						},
						{
							"absolutePath": "Umbra-Cash/@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 110,
							"sourceUnit": 1075,
							"src": "1337:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1074,
										"src": "1892:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Context_$1074",
											"typeString": "contract Context"
										}
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "1892:7:0"
								}
							],
							"contractDependencies": [
								1074
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "1368:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 109,
							"linearizedBaseContracts": [
								109,
								1074
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 109,
									"src": "1906:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1906:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "1962:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1962:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "1993:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1993:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1961:57:0"
									},
									"src": "1935:84:0"
								},
								{
									"body": {
										"id": 34,
										"nodeType": "Block",
										"src": "2145:135:0",
										"statements": [
											{
												"assignments": [
													18
												],
												"declarations": [
													{
														"constant": false,
														"id": 18,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"scope": 34,
														"src": "2155:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 17,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2155:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 21,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 19,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1062,
														"src": "2175:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2175:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2155:32:0"
											},
											{
												"expression": {
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 22,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2197:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 23,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 18,
														"src": "2206:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2197:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 25,
												"nodeType": "ExpressionStatement",
												"src": "2197:18:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 29,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2259:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 28,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2251:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 27,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2251:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 30,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2251:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 31,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 18,
															"src": "2263:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 26,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2230:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2230:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 33,
												"nodeType": "EmitStatement",
												"src": "2225:48:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "2025:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 35,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2133:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2145:0:0"
									},
									"scope": 109,
									"src": "2121:159:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 43,
										"nodeType": "Block",
										"src": "2411:30:0",
										"statements": [
											{
												"expression": {
													"id": 41,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2428:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 40,
												"id": 42,
												"nodeType": "Return",
												"src": "2421:13:0"
											}
										]
									},
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "2286:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 44,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2370:2:0"
									},
									"returnParameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2402:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2402:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2401:9:0"
									},
									"scope": 109,
									"src": "2356:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "2550:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 52,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 48,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 44,
																	"src": "2568:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 49,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2568:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 50,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1062,
																	"src": "2579:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2579:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2568:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2593:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 47,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2560:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2560:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "2560:68:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "2638:1:0"
											}
										]
									},
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2447:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2547:2:0"
									},
									"src": "2529:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 79,
										"nodeType": "Block",
										"src": "3042:91:0",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"id": 65,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "3078:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 68,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3094:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 67,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3086:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 66,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3086:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3086:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 64,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "3057:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3057:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 71,
												"nodeType": "EmitStatement",
												"src": "3052:45:0"
											},
											{
												"expression": {
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 72,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "3107:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 75,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3124:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3116:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 73,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3116:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 76,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3116:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "3107:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 78,
												"nodeType": "ExpressionStatement",
												"src": "3107:19:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "2652:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 80,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 62,
											"modifierName": {
												"id": 61,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "3032:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3032:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3014:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3042:0:0"
									},
									"scope": 109,
									"src": "2988:145:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 107,
										"nodeType": "Block",
										"src": "3352:170:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 89,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 83,
																"src": "3370:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 92,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3390:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 91,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3382:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 90,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3382:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 93,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3382:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "3370:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3394:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 88,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3362:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3362:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "3362:73:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 99,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "3471:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 100,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 83,
															"src": "3479:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 98,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "3450:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3450:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 102,
												"nodeType": "EmitStatement",
												"src": "3445:43:0"
											},
											{
												"expression": {
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 103,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "3498:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 104,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 83,
														"src": "3507:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3498:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 106,
												"nodeType": "ExpressionStatement",
												"src": "3498:17:0"
											}
										]
									},
									"documentation": {
										"id": 81,
										"nodeType": "StructuredDocumentation",
										"src": "3139:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 108,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 86,
											"modifierName": {
												"id": 85,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "3342:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3342:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "3309:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 82,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3309:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3308:18:0"
									},
									"returnParameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3352:0:0"
									},
									"scope": 109,
									"src": "3282:240:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 110,
							"src": "1863:1661:0"
						}
					],
					"src": "1304:2221:0"
				},
				"id": 0
			},
			"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							464
						]
					},
					"id": 465,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 111,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:31:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 112,
								"nodeType": "StructuredDocumentation",
								"src": "1337:563:1",
								"text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
							},
							"fullyImplemented": true,
							"id": 464,
							"linearizedBaseContracts": [
								464
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 142,
										"nodeType": "Block",
										"src": "2136:98:1",
										"statements": [
											{
												"assignments": [
													125
												],
												"declarations": [
													{
														"constant": false,
														"id": 125,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 142,
														"src": "2146:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 124,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2146:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 129,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 126,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2158:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 127,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "2162:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2158:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2146:17:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 130,
														"name": "c",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2177:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 131,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 115,
														"src": "2181:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2177:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 137,
												"nodeType": "IfStatement",
												"src": "2173:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 133,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2192:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2199:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 135,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2191:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 123,
													"id": 136,
													"nodeType": "Return",
													"src": "2184:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 138,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2219:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 139,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 125,
															"src": "2225:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 140,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2218:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 123,
												"id": 141,
												"nodeType": "Return",
												"src": "2211:16:1"
											}
										]
									},
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "1924:131:1",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 143,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "2076:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2076:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "2087:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2087:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2075:22:1"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "2121:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 119,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2121:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 143,
												"src": "2127:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2127:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2120:15:1"
									},
									"scope": 464,
									"src": "2060:174:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 169,
										"nodeType": "Block",
										"src": "2456:75:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 155,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 148,
														"src": "2470:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 156,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2474:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2470:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 162,
												"nodeType": "IfStatement",
												"src": "2466:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 158,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2485:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 159,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2492:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 160,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2484:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 154,
													"id": 161,
													"nodeType": "Return",
													"src": "2477:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 163,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2512:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 164,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 146,
																"src": "2518:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 165,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 148,
																"src": "2522:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2518:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 167,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "2511:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 154,
												"id": 168,
												"nodeType": "Return",
												"src": "2504:20:1"
											}
										]
									},
									"documentation": {
										"id": 144,
										"nodeType": "StructuredDocumentation",
										"src": "2240:135:1",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 170,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "2396:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2396:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "2407:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2407:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2395:22:1"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "2441:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 150,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2441:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 170,
												"src": "2447:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 152,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2447:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2440:15:1"
									},
									"scope": 464,
									"src": "2380:151:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "2755:359:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 182,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 173,
														"src": "2987:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 183,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2992:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2987:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 189,
												"nodeType": "IfStatement",
												"src": "2983:28:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "74727565",
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3003:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															{
																"hexValue": "30",
																"id": 186,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3009:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 187,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3002:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 181,
													"id": 188,
													"nodeType": "Return",
													"src": "2995:16:1"
												}
											},
											{
												"assignments": [
													191
												],
												"declarations": [
													{
														"constant": false,
														"id": 191,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 210,
														"src": "3021:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 190,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3021:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 195,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 192,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 173,
														"src": "3033:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 193,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 175,
														"src": "3037:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3033:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3021:17:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 196,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 191,
															"src": "3052:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 197,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 173,
															"src": "3056:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3052:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 199,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 175,
														"src": "3061:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3052:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 205,
												"nodeType": "IfStatement",
												"src": "3048:33:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 201,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3072:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 202,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3079:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 203,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3071:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 181,
													"id": 204,
													"nodeType": "Return",
													"src": "3064:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3099:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"id": 207,
															"name": "c",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 191,
															"src": "3105:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 208,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "3098:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 181,
												"id": 209,
												"nodeType": "Return",
												"src": "3091:16:1"
											}
										]
									},
									"documentation": {
										"id": 171,
										"nodeType": "StructuredDocumentation",
										"src": "2537:137:1",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2695:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2695:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2706:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 174,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2706:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2694:22:1"
									},
									"returnParameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2740:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 177,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2740:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2746:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2746:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2739:15:1"
									},
									"scope": 464,
									"src": "2679:435:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 237,
										"nodeType": "Block",
										"src": "3339:76:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 223,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 216,
														"src": "3353:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 224,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3358:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3353:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 230,
												"nodeType": "IfStatement",
												"src": "3349:29:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 226,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3369:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 227,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3376:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 228,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3368:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 222,
													"id": 229,
													"nodeType": "Return",
													"src": "3361:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 231,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3396:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 232,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 214,
																"src": "3402:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 233,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 216,
																"src": "3406:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3402:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 235,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "3395:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 222,
												"id": 236,
												"nodeType": "Return",
												"src": "3388:20:1"
											}
										]
									},
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "3120:138:1",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "3279:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3279:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "3290:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 215,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3290:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:22:1"
									},
									"returnParameters": {
										"id": 222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "3324:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 218,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3324:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "3330:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3330:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3323:15:1"
									},
									"scope": 464,
									"src": "3263:152:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 264,
										"nodeType": "Block",
										"src": "3650:76:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 250,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "3664:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 251,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3669:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3664:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 257,
												"nodeType": "IfStatement",
												"src": "3660:29:1",
												"trueBody": {
													"expression": {
														"components": [
															{
																"hexValue": "66616c7365",
																"id": 253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3680:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "30",
																"id": 254,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3687:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"id": 255,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "3679:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
															"typeString": "tuple(bool,int_const 0)"
														}
													},
													"functionReturnParameters": 249,
													"id": 256,
													"nodeType": "Return",
													"src": "3672:17:1"
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "74727565",
															"id": 258,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3707:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 261,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 259,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 241,
																"src": "3713:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 260,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 243,
																"src": "3717:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3713:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"id": 262,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "3706:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
														"typeString": "tuple(bool,uint256)"
													}
												},
												"functionReturnParameters": 249,
												"id": 263,
												"nodeType": "Return",
												"src": "3699:20:1"
											}
										]
									},
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "3421:148:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 265,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3590:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3590:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3601:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3601:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3589:22:1"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3635:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 245,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3635:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3641:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3641:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3634:15:1"
									},
									"scope": 464,
									"src": "3574:152:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 290,
										"nodeType": "Block",
										"src": "4028:108:1",
										"statements": [
											{
												"assignments": [
													276
												],
												"declarations": [
													{
														"constant": false,
														"id": 276,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 290,
														"src": "4038:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 275,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4038:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 280,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 277,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 268,
														"src": "4050:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 278,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 270,
														"src": "4054:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4050:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4038:17:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 282,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 276,
																"src": "4073:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 283,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 268,
																"src": "4078:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4073:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
															"id": 285,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4081:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															},
															"value": "SafeMath: addition overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
																"typeString": "literal_string \"SafeMath: addition overflow\""
															}
														],
														"id": 281,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4065:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4065:46:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 287,
												"nodeType": "ExpressionStatement",
												"src": "4065:46:1"
											},
											{
												"expression": {
													"id": 288,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 276,
													"src": "4128:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 274,
												"id": 289,
												"nodeType": "Return",
												"src": "4121:8:1"
											}
										]
									},
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "3732:224:1",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 291,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "3974:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3974:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "3985:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3985:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3973:22:1"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "4019:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4019:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4018:9:1"
									},
									"scope": 464,
									"src": "3961:175:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 312,
										"nodeType": "Block",
										"src": "4474:88:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 304,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 302,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 296,
																"src": "4492:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 303,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 294,
																"src": "4497:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4492:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
															"id": 305,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4500:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															},
															"value": "SafeMath: subtraction overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
																"typeString": "literal_string \"SafeMath: subtraction overflow\""
															}
														],
														"id": 301,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4484:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4484:49:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 307,
												"nodeType": "ExpressionStatement",
												"src": "4484:49:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 308,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 294,
														"src": "4550:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 309,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 296,
														"src": "4554:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4550:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 300,
												"id": 311,
												"nodeType": "Return",
												"src": "4543:12:1"
											}
										]
									},
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "4142:260:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 313,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "4420:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 293,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "4431:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4431:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4419:22:1"
									},
									"returnParameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "4465:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4464:9:1"
									},
									"scope": 464,
									"src": "4407:155:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 346,
										"nodeType": "Block",
										"src": "4876:148:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 323,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "4890:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 324,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4895:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4890:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 328,
												"nodeType": "IfStatement",
												"src": "4886:20:1",
												"trueBody": {
													"expression": {
														"hexValue": "30",
														"id": 326,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4905:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"functionReturnParameters": 322,
													"id": 327,
													"nodeType": "Return",
													"src": "4898:8:1"
												}
											},
											{
												"assignments": [
													330
												],
												"declarations": [
													{
														"constant": false,
														"id": 330,
														"mutability": "mutable",
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 346,
														"src": "4916:9:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 329,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4916:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 334,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 331,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 316,
														"src": "4928:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 332,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 318,
														"src": "4932:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4928:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4916:17:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 340,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 338,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 336,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 330,
																	"src": "4951:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 337,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 316,
																	"src": "4955:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4951:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 339,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 318,
																"src": "4960:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4951:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4963:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															},
															"value": "SafeMath: multiplication overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
																"typeString": "literal_string \"SafeMath: multiplication overflow\""
															}
														],
														"id": 335,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4943:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:56:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "4943:56:1"
											},
											{
												"expression": {
													"id": 344,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 330,
													"src": "5016:1:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 322,
												"id": 345,
												"nodeType": "Return",
												"src": "5009:8:1"
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "4568:236:1",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 347,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "4822:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4822:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "4833:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4833:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4821:22:1"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 321,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "4867:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4867:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4866:9:1"
									},
									"scope": 464,
									"src": "4809:215:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 368,
										"nodeType": "Block",
										"src": "5555:83:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 360,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 358,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 352,
																"src": "5573:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5577:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5573:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5580:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															},
															"value": "SafeMath: division by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
																"typeString": "literal_string \"SafeMath: division by zero\""
															}
														],
														"id": 357,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5565:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5565:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 363,
												"nodeType": "ExpressionStatement",
												"src": "5565:44:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 364,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 350,
														"src": "5626:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 365,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 352,
														"src": "5630:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5626:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 356,
												"id": 367,
												"nodeType": "Return",
												"src": "5619:12:1"
											}
										]
									},
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "5030:453:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 369,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "5501:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5501:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "5512:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 351,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5512:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5500:22:1"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 355,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 369,
												"src": "5546:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5546:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5545:9:1"
									},
									"scope": 464,
									"src": "5488:150:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "6158:81:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 380,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 374,
																"src": "6176:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 381,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6180:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6176:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
															"id": 383,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6183:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															},
															"value": "SafeMath: modulo by zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
																"typeString": "literal_string \"SafeMath: modulo by zero\""
															}
														],
														"id": 379,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6168:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 384,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6168:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 385,
												"nodeType": "ExpressionStatement",
												"src": "6168:42:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 386,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "6227:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 387,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 374,
														"src": "6231:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6227:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 378,
												"id": 389,
												"nodeType": "Return",
												"src": "6220:12:1"
											}
										]
									},
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "5644:442:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "6104:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 371,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6104:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "6115:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6115:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6103:22:1"
									},
									"returnParameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "6149:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 376,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6149:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6148:9:1"
									},
									"scope": 464,
									"src": "6091:148:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 414,
										"nodeType": "Block",
										"src": "6798:68:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 406,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 404,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 396,
																"src": "6816:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 405,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 394,
																"src": "6821:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6816:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 407,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "6824:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 403,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6808:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6808:29:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 409,
												"nodeType": "ExpressionStatement",
												"src": "6808:29:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 410,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 394,
														"src": "6854:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 411,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 396,
														"src": "6858:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6854:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 402,
												"id": 413,
												"nodeType": "Return",
												"src": "6847:12:1"
											}
										]
									},
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "6245:453:1",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 415,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "6716:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6716:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "6727:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6727:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "6738:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 397,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6738:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6715:50:1"
									},
									"returnParameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 415,
												"src": "6789:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 400,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6789:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6788:9:1"
									},
									"scope": 464,
									"src": "6703:163:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 438,
										"nodeType": "Block",
										"src": "7618:67:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 428,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 420,
																"src": "7636:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 429,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7640:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "7636:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 431,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 422,
															"src": "7643:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 427,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7628:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 432,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7628:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 433,
												"nodeType": "ExpressionStatement",
												"src": "7628:28:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 434,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 418,
														"src": "7673:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 435,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 420,
														"src": "7677:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7673:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 426,
												"id": 437,
												"nodeType": "Return",
												"src": "7666:12:1"
											}
										]
									},
									"documentation": {
										"id": 416,
										"nodeType": "StructuredDocumentation",
										"src": "6872:646:1",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryDiv}.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 439,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 439,
												"src": "7536:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7536:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 439,
												"src": "7547:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7547:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 439,
												"src": "7558:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7558:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7535:50:1"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 439,
												"src": "7609:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7609:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7608:9:1"
									},
									"scope": 464,
									"src": "7523:162:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 462,
										"nodeType": "Block",
										"src": "8426:67:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 452,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 444,
																"src": "8444:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 453,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8448:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8444:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 455,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "8451:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 451,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8436:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8436:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 457,
												"nodeType": "ExpressionStatement",
												"src": "8436:28:1"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 458,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 442,
														"src": "8481:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 459,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 444,
														"src": "8485:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8481:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 450,
												"id": 461,
												"nodeType": "Return",
												"src": "8474:12:1"
											}
										]
									},
									"documentation": {
										"id": 440,
										"nodeType": "StructuredDocumentation",
										"src": "7691:635:1",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 463,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "8344:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8344:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 444,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "8355:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 443,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8355:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 446,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "8366:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 445,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8366:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8343:50:1"
									},
									"returnParameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "8417:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8417:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8416:9:1"
									},
									"scope": 464,
									"src": "8331:162:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 465,
							"src": "1901:6594:1"
						}
					],
					"src": "1304:7192:1"
				},
				"id": 1
			},
			"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							542
						]
					},
					"id": 543,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 466,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:31:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 467,
								"nodeType": "StructuredDocumentation",
								"src": "1337:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 542,
							"linearizedBaseContracts": [
								542
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "1431:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 473,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1522:2:2"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 473,
												"src": "1548:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1548:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:9:2"
									},
									"scope": 542,
									"src": "1502:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 474,
										"nodeType": "StructuredDocumentation",
										"src": "1563:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 481,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1659:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1659:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1658:17:2"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 481,
												"src": "1699:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1699:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1698:9:2"
									},
									"scope": 542,
									"src": "1640:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 482,
										"nodeType": "StructuredDocumentation",
										"src": "1714:209:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 491,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "1946:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1946:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "1965:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 485,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1965:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1945:35:2"
									},
									"returnParameters": {
										"id": 490,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "1999:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 488,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1999:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1998:6:2"
									},
									"scope": 542,
									"src": "1928:77:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "2011:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 501,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "2299:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2299:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "2314:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 495,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2314:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2298:32:2"
									},
									"returnParameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 501,
												"src": "2354:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 498,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2354:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2353:9:2"
									},
									"scope": 542,
									"src": "2280:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 502,
										"nodeType": "StructuredDocumentation",
										"src": "2369:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 511,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "3033:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 503,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 506,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "3050:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 505,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3032:33:2"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "3084:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 508,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3084:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3083:6:2"
									},
									"scope": 542,
									"src": "3016:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 512,
										"nodeType": "StructuredDocumentation",
										"src": "3096:296:2",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "3419:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3419:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "3435:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3435:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "3454:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3454:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3418:51:2"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 523,
												"src": "3488:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 520,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3488:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:6:2"
									},
									"scope": 542,
									"src": "3397:97:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 524,
										"nodeType": "StructuredDocumentation",
										"src": "3500:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 532,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 526,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "3678:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 525,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3678:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "3700:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3700:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 530,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 532,
												"src": "3720:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 529,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3720:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3677:57:2"
									},
									"src": "3663:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 533,
										"nodeType": "StructuredDocumentation",
										"src": "3741:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 541,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 535,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "3909:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 534,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3909:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 537,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "3932:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 536,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3932:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 539,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 541,
												"src": "3957:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3957:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3908:63:2"
									},
									"src": "3894:78:2"
								}
							],
							"scope": 543,
							"src": "1408:2566:2"
						}
					],
					"src": "1304:2671:2"
				},
				"id": 2
			},
			"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							1051
						],
						"IERC20": [
							542
						],
						"SafeERC20": [
							755
						],
						"SafeMath": [
							464
						]
					},
					"id": 756,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 544,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:31:3"
						},
						{
							"absolutePath": "Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 545,
							"nodeType": "ImportDirective",
							"scope": 756,
							"sourceUnit": 543,
							"src": "1337:22:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol",
							"file": "../../math/SafeMath.sol",
							"id": 546,
							"nodeType": "ImportDirective",
							"scope": 756,
							"sourceUnit": 465,
							"src": "1360:33:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Umbra-Cash/@openzeppelin/contracts/utils/Address.sol",
							"file": "../../utils/Address.sol",
							"id": 547,
							"nodeType": "ImportDirective",
							"scope": 756,
							"sourceUnit": 1052,
							"src": "1394:33:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 548,
								"nodeType": "StructuredDocumentation",
								"src": "1429:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 755,
							"linearizedBaseContracts": [
								755
							],
							"name": "SafeERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 551,
									"libraryName": {
										"id": 549,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 464,
										"src": "1917:8:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$464",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "1911:27:3",
									"typeName": {
										"id": 550,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1930:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"id": 554,
									"libraryName": {
										"id": 552,
										"name": "Address",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 1051,
										"src": "1949:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Address_$1051",
											"typeString": "library Address"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "1943:26:3",
									"typeName": {
										"id": 553,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1961:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 575,
										"nodeType": "Block",
										"src": "2047:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 564,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 556,
															"src": "2077:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 567,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 556,
																			"src": "2107:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$542",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 491,
																		"src": "2107:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 569,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2107:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 570,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 558,
																	"src": "2132:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 571,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 560,
																	"src": "2136:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 565,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2084:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 566,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2084:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 572,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2084:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 563,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "2057:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2057:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 574,
												"nodeType": "ExpressionStatement",
												"src": "2057:86:3"
											}
										]
									},
									"id": 576,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 556,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "1997:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$542",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 555,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 542,
													"src": "1997:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$542",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "2011:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2011:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "2023:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:41:3"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2047:0:3"
									},
									"scope": 755,
									"src": "1975:175:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 600,
										"nodeType": "Block",
										"src": "2246:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 588,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 578,
															"src": "2276:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 591,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 578,
																			"src": "2306:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$542",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 592,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 523,
																		"src": "2306:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 593,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2306:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 594,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 580,
																	"src": "2335:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 595,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 582,
																	"src": "2341:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 596,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 584,
																	"src": "2345:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 589,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2283:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 590,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2283:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2283:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 587,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "2256:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2256:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 599,
												"nodeType": "ExpressionStatement",
												"src": "2256:96:3"
											}
										]
									},
									"id": 601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 578,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2182:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$542",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 577,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 542,
													"src": "2182:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$542",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2196:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2196:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2210:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2222:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2222:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2181:55:3"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2246:0:3"
									},
									"scope": 755,
									"src": "2156:203:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 643,
										"nodeType": "Block",
										"src": "2695:537:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 614,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 612,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 608,
																			"src": "2984:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 613,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2993:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "2984:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 615,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2983:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 625,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 620,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "3024:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20_$755",
																								"typeString": "library SafeERC20"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20_$755",
																								"typeString": "library SafeERC20"
																							}
																						],
																						"id": 619,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3016:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 618,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "3016:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 621,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "3016:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 622,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 606,
																					"src": "3031:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 616,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 604,
																					"src": "3000:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$542",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 617,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 501,
																				"src": "3000:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 623,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3000:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 624,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3043:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "3000:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 626,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2999:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2983:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3059:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 611,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2975:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2975:150:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 630,
												"nodeType": "ExpressionStatement",
												"src": "2975:150:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 632,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "3155:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 635,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 604,
																			"src": "3185:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$542",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 511,
																		"src": "3185:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 637,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "3185:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 638,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 606,
																	"src": "3209:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 639,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 608,
																	"src": "3218:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 633,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3162:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 634,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "3162:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3162:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 631,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "3135:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 641,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3135:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 642,
												"nodeType": "ExpressionStatement",
												"src": "3135:90:3"
											}
										]
									},
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "2365:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 644,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "2640:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$542",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 603,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 542,
													"src": "2640:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$542",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "2654:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 605,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2654:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "2671:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 607,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2671:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2639:46:3"
									},
									"returnParameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2695:0:3"
									},
									"scope": 755,
									"src": "2619:613:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 679,
										"nodeType": "Block",
										"src": "3324:197:3",
										"statements": [
											{
												"assignments": [
													654
												],
												"declarations": [
													{
														"constant": false,
														"id": 654,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 679,
														"src": "3334:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 653,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3334:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 666,
												"initialValue": {
													"arguments": [
														{
															"id": 664,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 650,
															"src": "3401:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 659,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3381:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$755",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$755",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 658,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3373:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 657,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3373:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3373:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 661,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 648,
																	"src": "3388:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 655,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 646,
																	"src": "3357:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$542",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 656,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 501,
																"src": "3357:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3357:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 663,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "add",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 291,
														"src": "3357:43:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3357:50:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3334:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 668,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 646,
															"src": "3437:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 671,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 646,
																			"src": "3467:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$542",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 672,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 511,
																		"src": "3467:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 673,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "3467:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 674,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 648,
																	"src": "3491:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 675,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 654,
																	"src": "3500:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 669,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3444:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 670,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "3444:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3444:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 667,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "3417:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3417:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 678,
												"nodeType": "ExpressionStatement",
												"src": "3417:97:3"
											}
										]
									},
									"id": 680,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 646,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "3269:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$542",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 645,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 542,
													"src": "3269:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$542",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 648,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "3283:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 647,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3283:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "3300:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 649,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3300:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3268:46:3"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3324:0:3"
									},
									"scope": 755,
									"src": "3238:283:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 716,
										"nodeType": "Block",
										"src": "3613:242:3",
										"statements": [
											{
												"assignments": [
													690
												],
												"declarations": [
													{
														"constant": false,
														"id": 690,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 716,
														"src": "3623:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 689,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3623:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 703,
												"initialValue": {
													"arguments": [
														{
															"id": 700,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "3690:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 701,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3697:43:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															},
															"value": "SafeERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 695,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3670:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$755",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$755",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 694,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3662:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 693,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3662:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 696,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3662:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 697,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 684,
																	"src": "3677:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 691,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 682,
																	"src": "3646:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$542",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 692,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 501,
																"src": "3646:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 698,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3646:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 699,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 415,
														"src": "3646:43:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3646:95:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3623:118:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 705,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 682,
															"src": "3771:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 708,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 682,
																			"src": "3801:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$542",
																				"typeString": "contract IERC20"
																			}
																		},
																		"id": 709,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 511,
																		"src": "3801:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "3801:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 711,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 684,
																	"src": "3825:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 712,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 690,
																	"src": "3834:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 706,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3778:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 707,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "3778:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 713,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3778:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 704,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 754,
														"src": "3751:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 714,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3751:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 715,
												"nodeType": "ExpressionStatement",
												"src": "3751:97:3"
											}
										]
									},
									"id": 717,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "3558:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$542",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 681,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 542,
													"src": "3558:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$542",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "3572:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 683,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3572:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 686,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 717,
												"src": "3589:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3589:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3557:46:3"
									},
									"returnParameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3613:0:3"
									},
									"scope": 755,
									"src": "3527:328:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 753,
										"nodeType": "Block",
										"src": "4308:681:3",
										"statements": [
											{
												"assignments": [
													726
												],
												"declarations": [
													{
														"constant": false,
														"id": 726,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 753,
														"src": "4657:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 725,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4657:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 735,
												"initialValue": {
													"arguments": [
														{
															"id": 732,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 722,
															"src": "4711:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 733,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4717:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 729,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 720,
																	"src": "4691:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$542",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$542",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 728,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4683:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 727,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4683:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4683:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 846,
														"src": "4683:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 734,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4683:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4657:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 736,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 726,
															"src": "4766:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 737,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4766:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 738,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4786:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "4766:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 752,
												"nodeType": "IfStatement",
												"src": "4762:221:3",
												"trueBody": {
													"id": 751,
													"nodeType": "Block",
													"src": "4789:194:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 743,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 726,
																				"src": "4906:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 745,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4919:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 744,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "4919:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 746,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "4918:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 741,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "4895:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 742,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "4895:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 747,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4895:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 748,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4927:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 740,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4887:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 749,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4887:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 750,
															"nodeType": "ExpressionStatement",
															"src": "4887:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 718,
										"nodeType": "StructuredDocumentation",
										"src": "3861:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 754,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "4267:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$542",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 719,
													"name": "IERC20",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 542,
													"src": "4267:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$542",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "4281:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 721,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4281:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4266:33:3"
									},
									"returnParameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4308:0:3"
									},
									"scope": 755,
									"src": "4238:751:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 756,
							"src": "1887:3104:3"
						}
					],
					"src": "1304:3688:3"
				},
				"id": 3
			},
			"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							1051
						]
					},
					"id": 1052,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 757,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:31:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 758,
								"nodeType": "StructuredDocumentation",
								"src": "1337:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1051,
							"linearizedBaseContracts": [
								1051
							],
							"name": "Address",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 774,
										"nodeType": "Block",
										"src": "2063:347:4",
										"statements": [
											{
												"assignments": [
													767
												],
												"declarations": [
													{
														"constant": false,
														"id": 767,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 774,
														"src": "2260:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 766,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2260:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 768,
												"nodeType": "VariableDeclarationStatement",
												"src": "2260:12:4"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2347:32:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2349:28:4",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "2369:7:4"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "2357:11:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "2357:20:4"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "2349:4:4"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 761,
														"isOffset": false,
														"isSlot": false,
														"src": "2369:7:4",
														"valueSize": 1
													},
													{
														"declaration": 767,
														"isOffset": false,
														"isSlot": false,
														"src": "2349:4:4",
														"valueSize": 1
													}
												],
												"id": 769,
												"nodeType": "InlineAssembly",
												"src": "2338:41:4"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 770,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "2395:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2402:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2395:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 765,
												"id": 773,
												"nodeType": "Return",
												"src": "2388:15:4"
											}
										]
									},
									"documentation": {
										"id": 759,
										"nodeType": "StructuredDocumentation",
										"src": "1427:565:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 775,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2017:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2017:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2016:17:4"
									},
									"returnParameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "2057:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 763,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2057:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2056:6:4"
									},
									"scope": 1051,
									"src": "1997:413:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 808,
										"nodeType": "Block",
										"src": "3398:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 790,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 786,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3424:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1051",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1051",
																				"typeString": "library Address"
																			}
																		],
																		"id": 785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3416:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 784,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3416:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 787,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3416:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 788,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "3416:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 789,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "3441:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3416:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 791,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 783,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3408:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 792,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3408:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 793,
												"nodeType": "ExpressionStatement",
												"src": "3408:73:4"
											},
											{
												"assignments": [
													795,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 795,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 808,
														"src": "3570:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 794,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3570:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 802,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 800,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3620:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 796,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 778,
																"src": "3588:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 797,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3588:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 799,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 798,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "3611:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3588:31:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3588:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3569:54:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 804,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "3641:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 805,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3650:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 803,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3633:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3633:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 807,
												"nodeType": "ExpressionStatement",
												"src": "3633:78:4"
											}
										]
									},
									"documentation": {
										"id": 776,
										"nodeType": "StructuredDocumentation",
										"src": "2416:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 809,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 781,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 809,
												"src": "3346:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 777,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3346:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 809,
												"src": "3373:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 779,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3373:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3345:43:4"
									},
									"returnParameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3398:0:4"
									},
									"scope": 1051,
									"src": "3327:391:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 825,
										"nodeType": "Block",
										"src": "4548:82:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 820,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 812,
															"src": "4576:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 821,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 814,
															"src": "4584:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 822,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4590:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 819,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															826,
															846
														],
														"referencedDeclaration": 846,
														"src": "4563:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 823,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4563:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 818,
												"id": 824,
												"nodeType": "Return",
												"src": "4556:67:4"
											}
										]
									},
									"documentation": {
										"id": 810,
										"nodeType": "StructuredDocumentation",
										"src": "3724:730:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 826,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 812,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "4481:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 811,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4481:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 814,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "4497:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 813,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4497:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4480:35:4"
									},
									"returnParameters": {
										"id": 818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "4534:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 816,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4534:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4533:14:4"
									},
									"scope": 1051,
									"src": "4459:171:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 845,
										"nodeType": "Block",
										"src": "4969:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 839,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 829,
															"src": "5008:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 840,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 831,
															"src": "5016:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 841,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5022:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 842,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 833,
															"src": "5025:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 838,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															866,
															916
														],
														"referencedDeclaration": 916,
														"src": "4986:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 843,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4986:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 837,
												"id": 844,
												"nodeType": "Return",
												"src": "4979:59:4"
											}
										]
									},
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "4636:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 846,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "4874:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4874:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "4890:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 830,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4890:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "4909:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 832,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4909:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4873:63:4"
									},
									"returnParameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 846,
												"src": "4955:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 835,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4955:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4954:14:4"
									},
									"scope": 1051,
									"src": "4852:193:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 865,
										"nodeType": "Block",
										"src": "5520:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 859,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 849,
															"src": "5559:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 860,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 851,
															"src": "5567:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 861,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 853,
															"src": "5573:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 862,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5580:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 858,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															866,
															916
														],
														"referencedDeclaration": 916,
														"src": "5537:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 863,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5537:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 857,
												"id": 864,
												"nodeType": "Return",
												"src": "5530:94:4"
											}
										]
									},
									"documentation": {
										"id": 847,
										"nodeType": "StructuredDocumentation",
										"src": "5051:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 866,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "5438:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 848,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5438:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "5454:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 850,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5454:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "5473:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 852,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5473:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5437:50:4"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "5506:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5506:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5505:14:4"
									},
									"scope": 1051,
									"src": "5407:224:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 915,
										"nodeType": "Block",
										"src": "6020:382:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 887,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 883,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "6046:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Address_$1051",
																				"typeString": "library Address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Address_$1051",
																				"typeString": "library Address"
																			}
																		],
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "6038:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 881,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "6038:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 884,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6038:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 885,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "6038:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 886,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 873,
																"src": "6063:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6038:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 888,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6070:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 880,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6030:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6030:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 890,
												"nodeType": "ExpressionStatement",
												"src": "6030:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 893,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 869,
																	"src": "6140:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 892,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 775,
																"src": "6129:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6129:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 895,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6149:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 891,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6121:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 896,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6121:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 897,
												"nodeType": "ExpressionStatement",
												"src": "6121:60:4"
											},
											{
												"assignments": [
													899,
													901
												],
												"declarations": [
													{
														"constant": false,
														"id": 899,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 915,
														"src": "6252:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 898,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6252:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 901,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 915,
														"src": "6266:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 900,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6266:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 908,
												"initialValue": {
													"arguments": [
														{
															"id": 906,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "6321:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 902,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 869,
																"src": "6293:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 903,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "6293:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 905,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 904,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 873,
																"src": "6313:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "6293:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6293:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6251:75:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 910,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 899,
															"src": "6361:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 911,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 901,
															"src": "6370:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 912,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "6382:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 909,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1050,
														"src": "6343:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6343:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 879,
												"id": 914,
												"nodeType": "Return",
												"src": "6336:59:4"
											}
										]
									},
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "5637:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 916,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "5910:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5910:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "5926:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 870,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5926:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "5945:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 872,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5945:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "5960:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 874,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5960:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5909:78:4"
									},
									"returnParameters": {
										"id": 879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 878,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 916,
												"src": "6006:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 877,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6006:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6005:14:4"
									},
									"scope": 1051,
									"src": "5879:523:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 932,
										"nodeType": "Block",
										"src": "6679:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 927,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 919,
															"src": "6715:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 928,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 921,
															"src": "6723:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 929,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6729:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 926,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															933,
															968
														],
														"referencedDeclaration": 968,
														"src": "6696:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6696:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 925,
												"id": 931,
												"nodeType": "Return",
												"src": "6689:80:4"
											}
										]
									},
									"documentation": {
										"id": 917,
										"nodeType": "StructuredDocumentation",
										"src": "6408:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 933,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 922,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "6607:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 918,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6607:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "6623:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 920,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6623:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6606:35:4"
									},
									"returnParameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "6665:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 923,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6665:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6664:14:4"
									},
									"scope": 1051,
									"src": "6579:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 967,
										"nodeType": "Block",
										"src": "7088:288:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 947,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 936,
																	"src": "7117:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 946,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 775,
																"src": "7106:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 948,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7106:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7126:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 945,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7098:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 950,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7098:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 951,
												"nodeType": "ExpressionStatement",
												"src": "7098:67:4"
											},
											{
												"assignments": [
													953,
													955
												],
												"declarations": [
													{
														"constant": false,
														"id": 953,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 967,
														"src": "7236:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 952,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7236:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 955,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 967,
														"src": "7250:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 954,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7250:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 960,
												"initialValue": {
													"arguments": [
														{
															"id": 958,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 938,
															"src": "7295:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 956,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 936,
															"src": "7277:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 957,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "7277:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 959,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7277:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7235:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 962,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 953,
															"src": "7335:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 963,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 955,
															"src": "7344:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 964,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 940,
															"src": "7356:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 961,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1050,
														"src": "7317:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7317:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 944,
												"id": 966,
												"nodeType": "Return",
												"src": "7310:59:4"
											}
										]
									},
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "6782:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 968,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "6988:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6988:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "7004:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 937,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7004:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "7023:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 939,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7023:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6987:63:4"
									},
									"returnParameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 968,
												"src": "7074:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 942,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7074:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7073:14:4"
									},
									"scope": 1051,
									"src": "6960:416:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 984,
										"nodeType": "Block",
										"src": "7652:101:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 979,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 971,
															"src": "7690:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 980,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 973,
															"src": "7698:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
															"id": 981,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7704:41:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															},
															"value": "Address: low-level delegate call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
																"typeString": "literal_string \"Address: low-level delegate call failed\""
															}
														],
														"id": 978,
														"name": "functionDelegateCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															985,
															1020
														],
														"referencedDeclaration": 1020,
														"src": "7669:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7669:77:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 977,
												"id": 983,
												"nodeType": "Return",
												"src": "7662:84:4"
											}
										]
									},
									"documentation": {
										"id": 969,
										"nodeType": "StructuredDocumentation",
										"src": "7382:168:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 971,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "7585:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 970,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7585:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "7601:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 972,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7601:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7584:35:4"
									},
									"returnParameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 985,
												"src": "7638:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 975,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7638:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7637:14:4"
									},
									"scope": 1051,
									"src": "7555:198:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1019,
										"nodeType": "Block",
										"src": "8064:292:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 999,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 988,
																	"src": "8093:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 998,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 775,
																"src": "8082:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 1000,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8082:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 1001,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8102:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															},
															"value": "Address: delegate call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
																"typeString": "literal_string \"Address: delegate call to non-contract\""
															}
														],
														"id": 997,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8074:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8074:69:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1003,
												"nodeType": "ExpressionStatement",
												"src": "8074:69:4"
											},
											{
												"assignments": [
													1005,
													1007
												],
												"declarations": [
													{
														"constant": false,
														"id": 1005,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 1019,
														"src": "8214:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1004,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "8214:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1007,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 1019,
														"src": "8228:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1006,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "8228:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1012,
												"initialValue": {
													"arguments": [
														{
															"id": 1010,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 990,
															"src": "8275:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1008,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 988,
															"src": "8255:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1009,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "8255:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 1011,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8255:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8213:67:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1014,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "8315:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1015,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1007,
															"src": "8324:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1016,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 992,
															"src": "8336:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1013,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1050,
														"src": "8297:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 1017,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8297:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 996,
												"id": 1018,
												"nodeType": "Return",
												"src": "8290:59:4"
											}
										]
									},
									"documentation": {
										"id": 986,
										"nodeType": "StructuredDocumentation",
										"src": "7759:175:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
									},
									"id": 1020,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "7969:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7969:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "7985:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 989,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7985:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "8004:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 991,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8004:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7968:63:4"
									},
									"returnParameters": {
										"id": 996,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "8050:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 994,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8050:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8049:14:4"
									},
									"scope": 1051,
									"src": "7939:417:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1049,
										"nodeType": "Block",
										"src": "8491:596:4",
										"statements": [
											{
												"condition": {
													"id": 1031,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1022,
													"src": "8505:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1047,
													"nodeType": "Block",
													"src": "8562:519:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1038,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1035,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1024,
																		"src": "8646:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "8646:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1037,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8666:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "8646:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 1045,
																"nodeType": "Block",
																"src": "9018:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 1042,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1026,
																					"src": "9043:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 1041,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "9036:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 1043,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9036:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1044,
																		"nodeType": "ExpressionStatement",
																		"src": "9036:20:4"
																	}
																]
															},
															"id": 1046,
															"nodeType": "IfStatement",
															"src": "8642:429:4",
															"trueBody": {
																"id": 1040,
																"nodeType": "Block",
																"src": "8669:343:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "8853:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "8875:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "8904:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "8898:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8898:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "8879:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "8947:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "8951:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "8943:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "8943:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "8964:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "8936:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "8936:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "8936:44:4"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 1024,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8904:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 1024,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "8951:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 1039,
																		"nodeType": "InlineAssembly",
																		"src": "8844:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 1048,
												"nodeType": "IfStatement",
												"src": "8501:580:4",
												"trueBody": {
													"id": 1034,
													"nodeType": "Block",
													"src": "8514:42:4",
													"statements": [
														{
															"expression": {
																"id": 1032,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1024,
																"src": "8535:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1030,
															"id": 1033,
															"nodeType": "Return",
															"src": "8528:17:4"
														}
													]
												}
											}
										]
									},
									"id": 1050,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1027,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "8389:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1021,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8389:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1024,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "8403:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1023,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8403:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "8428:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1025,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "8428:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8388:67:4"
									},
									"returnParameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1050,
												"src": "8477:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1028,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8477:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8476:14:4"
									},
									"scope": 1051,
									"src": "8362:725:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1052,
							"src": "1405:7684:4"
						}
					],
					"src": "1304:7786:4"
				},
				"id": 4
			},
			"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1074
						]
					},
					"id": 1075,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1053,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:31:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1074,
							"linearizedBaseContracts": [
								1074
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1061,
										"nodeType": "Block",
										"src": "1939:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1058,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1956:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "1956:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 1057,
												"id": 1060,
												"nodeType": "Return",
												"src": "1949:17:5"
											}
										]
									},
									"id": 1062,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1054,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1888:2:5"
									},
									"returnParameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1062,
												"src": "1922:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1055,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1922:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1921:17:5"
									},
									"scope": 1074,
									"src": "1869:104:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1072,
										"nodeType": "Block",
										"src": "2044:165:5",
										"statements": [
											{
												"expression": {
													"id": 1067,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967268,
													"src": "2054:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_Context_$1074",
														"typeString": "contract Context"
													}
												},
												"id": 1068,
												"nodeType": "ExpressionStatement",
												"src": "2054:4:5"
											},
											{
												"expression": {
													"expression": {
														"id": 1069,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "2194:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "2194:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1066,
												"id": 1071,
												"nodeType": "Return",
												"src": "2187:15:5"
											}
										]
									},
									"id": 1073,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1996:2:5"
									},
									"returnParameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1065,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "2030:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1064,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2030:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2029:14:5"
									},
									"scope": 1074,
									"src": "1979:230:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1075,
							"src": "1837:374:5"
						}
					],
					"src": "1304:908:5"
				},
				"id": 5
			},
			"Umbra-Cash/contracts/IUmbraHookReceiver.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/contracts/IUmbraHookReceiver.sol",
					"exportedSymbols": {
						"IUmbraHookReceiver": [
							1096
						]
					},
					"id": 1097,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1076,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1077,
								"nodeType": "StructuredDocumentation",
								"src": "1329:81:6",
								"text": "@dev Interface that post-withdraw hooks must implement to interop with Umbra"
							},
							"fullyImplemented": false,
							"id": 1096,
							"linearizedBaseContracts": [
								1096
							],
							"name": "IUmbraHookReceiver",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1078,
										"nodeType": "StructuredDocumentation",
										"src": "1443:635:6",
										"text": " @notice Method called after a user completes an Umbra token withdrawal\n @param _amount The amount of the token withdrawn _after_ subtracting the sponsor fee\n @param _stealthAddr The stealth address whose token balance was withdrawn\n @param _acceptor Address where withdrawn funds were sent; can be this contract\n @param _tokenAddr Address of the ERC20 token that was withdrawn\n @param _sponsor Address which was compensated for submitting the withdrawal tx\n @param _sponsorFee Amount of the token that was paid to the sponsor\n @param _data Arbitrary data passed to this hook by the withdrawer"
									},
									"functionSelector": "579073de",
									"id": 1095,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokensWithdrawn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1080,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2111:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1082,
												"mutability": "mutable",
												"name": "_stealthAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2132:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1081,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2132:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1084,
												"mutability": "mutable",
												"name": "_acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2158:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1083,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2158:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2181:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1085,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2181:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "_sponsor",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2205:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2205:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "_sponsorFee",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2227:19:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1089,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2227:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 1095,
												"src": "2252:18:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1091,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2252:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2105:169:6"
									},
									"returnParameters": {
										"id": 1094,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2283:0:6"
									},
									"scope": 1096,
									"src": "2081:203:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1097,
							"src": "1410:876:6"
						}
					],
					"src": "1304:983:6"
				},
				"id": 6
			},
			"Umbra-Cash/contracts/Umbra.sol": {
				"ast": {
					"absolutePath": "Umbra-Cash/contracts/Umbra.sol",
					"exportedSymbols": {
						"Address": [
							1051
						],
						"Context": [
							1074
						],
						"IERC20": [
							542
						],
						"IUmbraHookReceiver": [
							1096
						],
						"Ownable": [
							109
						],
						"SafeERC20": [
							755
						],
						"SafeMath": [
							464
						],
						"Umbra": [
							1677
						]
					},
					"id": 1678,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1098,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "1304:23:7"
						},
						{
							"absolutePath": "Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol",
							"file": "Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol",
							"id": 1099,
							"nodeType": "ImportDirective",
							"scope": 1678,
							"sourceUnit": 110,
							"src": "1329:63:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
							"file": "Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol",
							"id": 1100,
							"nodeType": "ImportDirective",
							"scope": 1678,
							"sourceUnit": 756,
							"src": "1393:70:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "Umbra-Cash/contracts/IUmbraHookReceiver.sol",
							"file": "./IUmbraHookReceiver.sol",
							"id": 1101,
							"nodeType": "ImportDirective",
							"scope": 1678,
							"sourceUnit": 1097,
							"src": "1464:34:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1102,
										"name": "Ownable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 109,
										"src": "1518:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Ownable_$109",
											"typeString": "contract Ownable"
										}
									},
									"id": 1103,
									"nodeType": "InheritanceSpecifier",
									"src": "1518:7:7"
								}
							],
							"contractDependencies": [
								109,
								1074
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1677,
							"linearizedBaseContracts": [
								1677,
								109,
								1074
							],
							"name": "Umbra",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1104,
										"nodeType": "StructuredDocumentation",
										"src": "1632:42:7",
										"text": "@notice Emitted when a payment is sent"
									},
									"id": 1116,
									"name": "Announcement",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "1701:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1701:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1108,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "1750:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1750:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "1779:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1779:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1112,
												"indexed": false,
												"mutability": "mutable",
												"name": "pkx",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "1842:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1111,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1842:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"indexed": false,
												"mutability": "mutable",
												"name": "ciphertext",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "1896:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1113,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1896:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:266:7"
									},
									"src": "1677:285:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1117,
										"nodeType": "StructuredDocumentation",
										"src": "1966:45:7",
										"text": "@notice Emitted when a token is withdrawn"
									},
									"id": 1127,
									"name": "TokenWithdrawal",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "2041:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"indexed": true,
												"mutability": "mutable",
												"name": "acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "2090:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2090:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1123,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "2144:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2144:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1125,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "2173:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1124,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2173:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2035:180:7"
									},
									"src": "2014:202:7"
								},
								{
									"constant": true,
									"documentation": {
										"id": 1128,
										"nodeType": "StructuredDocumentation",
										"src": "2322:68:7",
										"text": "@dev Placeholder address used to identify transfer of native ETH"
									},
									"id": 1131,
									"mutability": "constant",
									"name": "ETH_TOKEN_PLACHOLDER",
									"nodeType": "VariableDeclaration",
									"scope": 1677,
									"src": "2393:91:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1129,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2393:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"hexValue": "307845656565654565656545654565654565456545656545454565656565456565656565656545456545",
										"id": 1130,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2442:42:7",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										},
										"value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1132,
										"nodeType": "StructuredDocumentation",
										"src": "2489:96:7",
										"text": "@notice An ETH amount that must be sent alongside each payment; used as an anti-spam measure"
									},
									"functionSelector": "285aaa20",
									"id": 1134,
									"mutability": "mutable",
									"name": "toll",
									"nodeType": "VariableDeclaration",
									"scope": 1677,
									"src": "2588:19:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1133,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2588:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1135,
										"nodeType": "StructuredDocumentation",
										"src": "2612:90:7",
										"text": "@notice A privileged address, set by the admin, that can sweep all collected ETH tolls"
									},
									"functionSelector": "7e8c2f94",
									"id": 1137,
									"mutability": "mutable",
									"name": "tollCollector",
									"nodeType": "VariableDeclaration",
									"scope": 1677,
									"src": "2705:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1136,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2705:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1138,
										"nodeType": "StructuredDocumentation",
										"src": "2738:84:7",
										"text": "@notice The address where ETH funds are sent when collected by the tollCollector"
									},
									"functionSelector": "b400ee46",
									"id": 1140,
									"mutability": "mutable",
									"name": "tollReceiver",
									"nodeType": "VariableDeclaration",
									"scope": 1677,
									"src": "2825:35:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 1139,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2825:15:7",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1141,
										"nodeType": "StructuredDocumentation",
										"src": "2865:89:7",
										"text": "@notice Token payments pending withdrawal; stealth address => token address => amount"
									},
									"functionSelector": "8ef490b0",
									"id": 1147,
									"mutability": "mutable",
									"name": "tokenPayments",
									"nodeType": "VariableDeclaration",
									"scope": 1677,
									"src": "2957:68:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 1146,
										"keyType": {
											"id": 1142,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2965:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2957:47:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 1145,
											"keyType": {
												"id": 1143,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2984:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "2976:27:7",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 1144,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2995:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1169,
										"nodeType": "Block",
										"src": "3421:93:7",
										"statements": [
											{
												"expression": {
													"id": 1159,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1157,
														"name": "toll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1134,
														"src": "3427:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1158,
														"name": "_toll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1150,
														"src": "3434:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3427:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1160,
												"nodeType": "ExpressionStatement",
												"src": "3427:12:7"
											},
											{
												"expression": {
													"id": 1163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1161,
														"name": "tollCollector",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1137,
														"src": "3445:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1162,
														"name": "_tollCollector",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1152,
														"src": "3461:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3445:30:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1164,
												"nodeType": "ExpressionStatement",
												"src": "3445:30:7"
											},
											{
												"expression": {
													"id": 1167,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1165,
														"name": "tollReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1140,
														"src": "3481:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1166,
														"name": "_tollReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1154,
														"src": "3496:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "3481:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 1168,
												"nodeType": "ExpressionStatement",
												"src": "3481:28:7"
											}
										]
									},
									"documentation": {
										"id": 1148,
										"nodeType": "StructuredDocumentation",
										"src": "3131:189:7",
										"text": " @param _toll Amount of ETH required per send\n @param _tollCollector Address that can sweep collected funds\n @param _tollReceiver Address that receives collected funds"
									},
									"id": 1170,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "_toll",
												"nodeType": "VariableDeclaration",
												"scope": 1170,
												"src": "3340:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3340:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1152,
												"mutability": "mutable",
												"name": "_tollCollector",
												"nodeType": "VariableDeclaration",
												"scope": 1170,
												"src": "3359:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3359:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "_tollReceiver",
												"nodeType": "VariableDeclaration",
												"scope": 1170,
												"src": "3387:29:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3387:15:7",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3334:86:7"
									},
									"returnParameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3421:0:7"
									},
									"scope": 1677,
									"src": "3323:191:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1182,
										"nodeType": "Block",
										"src": "3677:26:7",
										"statements": [
											{
												"expression": {
													"id": 1180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1178,
														"name": "toll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1134,
														"src": "3683:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1179,
														"name": "_newToll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1173,
														"src": "3690:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3683:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1181,
												"nodeType": "ExpressionStatement",
												"src": "3683:15:7"
											}
										]
									},
									"documentation": {
										"id": 1171,
										"nodeType": "StructuredDocumentation",
										"src": "3518:102:7",
										"text": " @notice Admin only function to update the toll\n @param _newToll New ETH toll in wei"
									},
									"functionSelector": "a3dace5d",
									"id": 1183,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1176,
											"modifierName": {
												"id": 1175,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "3667:9:7",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3667:9:7"
										}
									],
									"name": "setToll",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "_newToll",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3640:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3639:18:7"
									},
									"returnParameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3677:0:7"
									},
									"scope": 1677,
									"src": "3623:80:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1195,
										"nodeType": "Block",
										"src": "3930:44:7",
										"statements": [
											{
												"expression": {
													"id": 1193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1191,
														"name": "tollCollector",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1137,
														"src": "3936:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1192,
														"name": "_newTollCollector",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1186,
														"src": "3952:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3936:33:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1194,
												"nodeType": "ExpressionStatement",
												"src": "3936:33:7"
											}
										]
									},
									"documentation": {
										"id": 1184,
										"nodeType": "StructuredDocumentation",
										"src": "3707:148:7",
										"text": " @notice Admin only function to update the toll collector\n @param _newTollCollector New address which has fund sweeping privileges"
									},
									"functionSelector": "0c6b7067",
									"id": 1196,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1189,
											"modifierName": {
												"id": 1188,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "3920:9:7",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "3920:9:7"
										}
									],
									"name": "setTollCollector",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1186,
												"mutability": "mutable",
												"name": "_newTollCollector",
												"nodeType": "VariableDeclaration",
												"scope": 1196,
												"src": "3884:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3884:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3883:27:7"
									},
									"returnParameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3930:0:7"
									},
									"scope": 1677,
									"src": "3858:116:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1208,
										"nodeType": "Block",
										"src": "4201:42:7",
										"statements": [
											{
												"expression": {
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1204,
														"name": "tollReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1140,
														"src": "4207:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1205,
														"name": "_newTollReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "4222:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "4207:31:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 1207,
												"nodeType": "ExpressionStatement",
												"src": "4207:31:7"
											}
										]
									},
									"documentation": {
										"id": 1197,
										"nodeType": "StructuredDocumentation",
										"src": "3978:142:7",
										"text": " @notice Admin only function to update the toll receiver\n @param _newTollReceiver New address which receives collected funds"
									},
									"functionSelector": "c0b9b4ea",
									"id": 1209,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1202,
											"modifierName": {
												"id": 1201,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 58,
												"src": "4191:9:7",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "4191:9:7"
										}
									],
									"name": "setTollReceiver",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "_newTollReceiver",
												"nodeType": "VariableDeclaration",
												"scope": 1209,
												"src": "4148:32:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4148:15:7",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4147:34:7"
									},
									"returnParameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4201:0:7"
									},
									"scope": 1677,
									"src": "4123:120:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1231,
										"nodeType": "Block",
										"src": "4383:126:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1214,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4397:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1215,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "4397:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1216,
																"name": "tollCollector",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1137,
																"src": "4411:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4397:27:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556d6272613a204e6f7420746f6c6c20636f6c6c6563746f72",
															"id": 1218,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4426:27:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5e56226e4c2072d6313b939527416e9e42b0437db88dc0dfb0e83c80a7765f7e",
																"typeString": "literal_string \"Umbra: Not toll collector\""
															},
															"value": "Umbra: Not toll collector"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5e56226e4c2072d6313b939527416e9e42b0437db88dc0dfb0e83c80a7765f7e",
																"typeString": "literal_string \"Umbra: Not toll collector\""
															}
														],
														"id": 1213,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4389:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4389:65:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1220,
												"nodeType": "ExpressionStatement",
												"src": "4389:65:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1226,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "4490:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Umbra_$1677",
																			"typeString": "contract Umbra"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Umbra_$1677",
																			"typeString": "contract Umbra"
																		}
																	],
																	"id": 1225,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4482:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1224,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4482:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1227,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4482:13:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1228,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "balance",
															"nodeType": "MemberAccess",
															"src": "4482:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1221,
															"name": "tollReceiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1140,
															"src": "4460:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1223,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "4460:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4460:44:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1230,
												"nodeType": "ExpressionStatement",
												"src": "4460:44:7"
											}
										]
									},
									"documentation": {
										"id": 1210,
										"nodeType": "StructuredDocumentation",
										"src": "4247:100:7",
										"text": " @notice Function only the toll collector can call to sweep funds to the toll receiver"
									},
									"functionSelector": "185ad0a5",
									"id": 1232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "collectTolls",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4371:2:7"
									},
									"returnParameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4383:0:7"
									},
									"scope": 1677,
									"src": "4350:159:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1280,
										"nodeType": "Block",
										"src": "5366:351:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1245,
																"name": "_tollCommitment",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1237,
																"src": "5380:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1246,
																"name": "toll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1134,
																"src": "5399:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5380:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556d6272613a20496e76616c6964206f72206f7574646174656420746f6c6c20636f6d6d69746d656e74",
															"id": 1248,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5405:44:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3ba2500259aaf08c491d20e45c71e26c1f3d2f4807d550af7cccfc731dcbadcb",
																"typeString": "literal_string \"Umbra: Invalid or outdated toll commitment\""
															},
															"value": "Umbra: Invalid or outdated toll commitment"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3ba2500259aaf08c491d20e45c71e26c1f3d2f4807d550af7cccfc731dcbadcb",
																"typeString": "literal_string \"Umbra: Invalid or outdated toll commitment\""
															}
														],
														"id": 1244,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5372:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5372:78:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1250,
												"nodeType": "ExpressionStatement",
												"src": "5372:78:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1255,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1252,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5501:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5501:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1254,
																"name": "toll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1134,
																"src": "5513:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5501:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556d6272613a204d75737420706179206d6f7265207468616e2074686520746f6c6c",
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5519:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_00ca1233b01abaabbdb94e9011f33e8aa8820481688dcdb39c067911cae56dfa",
																"typeString": "literal_string \"Umbra: Must pay more than the toll\""
															},
															"value": "Umbra: Must pay more than the toll"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_00ca1233b01abaabbdb94e9011f33e8aa8820481688dcdb39c067911cae56dfa",
																"typeString": "literal_string \"Umbra: Must pay more than the toll\""
															}
														],
														"id": 1251,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5493:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5493:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1258,
												"nodeType": "ExpressionStatement",
												"src": "5493:63:7"
											},
											{
												"assignments": [
													1260
												],
												"declarations": [
													{
														"constant": false,
														"id": 1260,
														"mutability": "mutable",
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"scope": 1280,
														"src": "5563:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1259,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5563:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1265,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1261,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "5580:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1262,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "5580:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1263,
														"name": "toll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1134,
														"src": "5592:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5580:16:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5563:33:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1267,
															"name": "_receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "5620:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1268,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1260,
															"src": "5631:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1269,
															"name": "ETH_TOKEN_PLACHOLDER",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1131,
															"src": "5639:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1270,
															"name": "_pkx",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1239,
															"src": "5661:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1271,
															"name": "_ciphertext",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1241,
															"src": "5667:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1266,
														"name": "Announcement",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1116,
														"src": "5607:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,uint256,address,bytes32,bytes32)"
														}
													},
													"id": 1272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5607:72:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1273,
												"nodeType": "EmitStatement",
												"src": "5602:77:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1277,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1260,
															"src": "5705:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1274,
															"name": "_receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "5686:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 1276,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "5686:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5686:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "5686:26:7"
											}
										]
									},
									"documentation": {
										"id": 1233,
										"nodeType": "StructuredDocumentation",
										"src": "4614:571:7",
										"text": " @notice Send and announce ETH payment to a stealth address\n @param _receiver Stealth address receiving the payment\n @param _tollCommitment Exact toll the sender is paying; should equal contract toll;\n the committment is used to prevent frontrunning attacks by the owner;\n see https://github.com/ScopeLift/umbra-protocol/issues/54 for more information\n @param _pkx X-coordinate of the ephemeral public key used to encrypt the payload\n @param _ciphertext Encrypted entropy (used to generated the stealth address) and payload extension"
									},
									"functionSelector": "beb9addf",
									"id": 1281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendEth",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "_receiver",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "5210:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5210:15:7",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "_tollCommitment",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "5241:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5241:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "_pkx",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "5270:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1238,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5270:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "_ciphertext",
												"nodeType": "VariableDeclaration",
												"scope": 1281,
												"src": "5325:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1240,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5204:144:7"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5366:0:7"
									},
									"scope": 1677,
									"src": "5188:529:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1345,
										"nodeType": "Block",
										"src": "6372:396:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1296,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6386:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1297,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "6386:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1298,
																"name": "toll",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1134,
																"src": "6399:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6386:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556d6272613a204d757374207061792074686520657861637420746f6c6c",
															"id": 1300,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6405:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ae2c61d6b24c1b202ab3e9fd5e9980a765afd3d938611c213606d84a7ce7f75f",
																"typeString": "literal_string \"Umbra: Must pay the exact toll\""
															},
															"value": "Umbra: Must pay the exact toll"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ae2c61d6b24c1b202ab3e9fd5e9980a765afd3d938611c213606d84a7ce7f75f",
																"typeString": "literal_string \"Umbra: Must pay the exact toll\""
															}
														],
														"id": 1295,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6378:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6378:60:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1302,
												"nodeType": "ExpressionStatement",
												"src": "6378:60:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 1304,
																		"name": "tokenPayments",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1147,
																		"src": "6452:13:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(address => uint256))"
																		}
																	},
																	"id": 1306,
																	"indexExpression": {
																		"id": 1305,
																		"name": "_receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1284,
																		"src": "6466:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6452:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1308,
																"indexExpression": {
																	"id": 1307,
																	"name": "_tokenAddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1286,
																	"src": "6477:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6452:36:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1309,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6492:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6452:41:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556d6272613a2043616e6e6f742073656e64206d6f726520746f6b656e7320746f20737465616c74682061646472657373",
															"id": 1311,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6495:51:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_91b974c51d0aa6487a00d9c7a5b1a24d189aa620f85343b127c7cf92d6abc644",
																"typeString": "literal_string \"Umbra: Cannot send more tokens to stealth address\""
															},
															"value": "Umbra: Cannot send more tokens to stealth address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_91b974c51d0aa6487a00d9c7a5b1a24d189aa620f85343b127c7cf92d6abc644",
																"typeString": "literal_string \"Umbra: Cannot send more tokens to stealth address\""
															}
														],
														"id": 1303,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6444:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6444:103:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1313,
												"nodeType": "ExpressionStatement",
												"src": "6444:103:7"
											},
											{
												"expression": {
													"id": 1320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1314,
																"name": "tokenPayments",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1147,
																"src": "6554:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1317,
															"indexExpression": {
																"id": 1315,
																"name": "_receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1284,
																"src": "6568:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "6554:24:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1318,
														"indexExpression": {
															"id": 1316,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1286,
															"src": "6579:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6554:36:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1319,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1288,
														"src": "6593:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6554:46:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1321,
												"nodeType": "ExpressionStatement",
												"src": "6554:46:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1323,
															"name": "_receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "6624:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1324,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1288,
															"src": "6635:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1325,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1286,
															"src": "6644:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1326,
															"name": "_pkx",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1290,
															"src": "6656:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1327,
															"name": "_ciphertext",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1292,
															"src": "6662:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1322,
														"name": "Announcement",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1116,
														"src": "6611:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,uint256,address,bytes32,bytes32)"
														}
													},
													"id": 1328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6611:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1329,
												"nodeType": "EmitStatement",
												"src": "6606:68:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1334,
																	"name": "_tokenAddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1286,
																	"src": "6715:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1333,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 542,
																"src": "6708:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$542_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6708:18:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															}
														},
														{
															"expression": {
																"id": 1336,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6728:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "6728:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"arguments": [
																{
																	"id": 1340,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6748:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Umbra_$1677",
																		"typeString": "contract Umbra"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Umbra_$1677",
																		"typeString": "contract Umbra"
																	}
																],
																"id": 1339,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6740:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1338,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6740:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6740:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1342,
															"name": "_amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1288,
															"src": "6755:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1330,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "6681:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$755_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 601,
														"src": "6681:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6681:82:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1344,
												"nodeType": "ExpressionStatement",
												"src": "6681:82:7"
											}
										]
									},
									"documentation": {
										"id": 1282,
										"nodeType": "StructuredDocumentation",
										"src": "5721:460:7",
										"text": " @notice Send and announce an ERC20 payment to a stealth address\n @param _receiver Stealth address receiving the payment\n @param _tokenAddr Address of the ERC20 token being sent\n @param _amount Amount of the token to send, in its own base units\n @param _pkx X-coordinate of the ephemeral public key used to encrypt the payload\n @param _ciphertext Encrypted entropy (used to generated the stealth address) and payload extension"
									},
									"functionSelector": "b9bfabe1",
									"id": 1346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "_receiver",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "6208:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6208:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "6231:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6231:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1288,
												"mutability": "mutable",
												"name": "_amount",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "6255:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6255:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "_pkx",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "6276:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1289,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6276:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "_ciphertext",
												"nodeType": "VariableDeclaration",
												"scope": 1346,
												"src": "6331:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1291,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6331:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6202:152:7"
									},
									"returnParameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6372:0:7"
									},
									"scope": 1677,
									"src": "6184:584:7",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1370,
										"nodeType": "Block",
										"src": "7229:110:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1355,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7258:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7258:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1357,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "7270:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1358,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1351,
															"src": "7281:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1361,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7301:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1360,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7293:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1359,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7293:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1362,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7293:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"hexValue": "30",
															"id": 1363,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7305:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1365,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7327:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1364,
																"name": "IUmbraHookReceiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1096,
																"src": "7308:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUmbraHookReceiver_$1096_$",
																	"typeString": "type(contract IUmbraHookReceiver)"
																}
															},
															"id": 1366,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7308:21:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															}
														},
														{
															"hexValue": "",
															"id": 1367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7331:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1354,
														"name": "_withdrawTokenInternal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1596,
														"src": "7235:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_contract$_IUmbraHookReceiver_$1096_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory)"
														}
													},
													"id": 1368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7235:99:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1369,
												"nodeType": "ExpressionStatement",
												"src": "7235:99:7"
											}
										]
									},
									"documentation": {
										"id": 1347,
										"nodeType": "StructuredDocumentation",
										"src": "6873:282:7",
										"text": " @notice Withdraw an ERC20 token payment sent to a stealth address\n @dev This method must be directly called by the stealth address\n @param _acceptor Address where withdrawn funds should be sent\n @param _tokenAddr Address of the ERC20 token being withdrawn"
									},
									"functionSelector": "3aeac4e1",
									"id": 1371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawToken",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1352,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "_acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "7181:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7181:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1351,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1371,
												"src": "7200:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7200:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7180:39:7"
									},
									"returnParameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7229:0:7"
									},
									"scope": 1677,
									"src": "7158:181:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1397,
										"nodeType": "Block",
										"src": "7948:97:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1384,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7977:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7977:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1386,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1374,
															"src": "7989:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1387,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1376,
															"src": "8000:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1390,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8020:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1389,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8012:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1388,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8012:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1391,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8012:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"hexValue": "30",
															"id": 1392,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8024:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1393,
															"name": "_hook",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1378,
															"src": "8027:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															}
														},
														{
															"id": 1394,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1380,
															"src": "8034:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1383,
														"name": "_withdrawTokenInternal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1596,
														"src": "7954:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_contract$_IUmbraHookReceiver_$1096_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory)"
														}
													},
													"id": 1395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7954:86:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1396,
												"nodeType": "ExpressionStatement",
												"src": "7954:86:7"
											}
										]
									},
									"documentation": {
										"id": 1372,
										"nodeType": "StructuredDocumentation",
										"src": "7343:458:7",
										"text": " @notice Withdraw an ERC20 token payment sent to a stealth address\n @dev This method must be directly called by the stealth address\n @param _acceptor Address where withdrawn funds should be sent\n @param _tokenAddr Address of the ERC20 token being withdrawn\n @param _hook Contract that will be called after the token withdrawal has completed\n @param _data Arbitrary data that will be passed to the post-withdraw hook contract"
									},
									"functionSelector": "059ca2f5",
									"id": 1398,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawTokenAndCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "_acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "7839:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7839:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1376,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "7862:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7862:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "_hook",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "7886:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
													"typeString": "contract IUmbraHookReceiver"
												},
												"typeName": {
													"id": 1377,
													"name": "IUmbraHookReceiver",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1096,
													"src": "7886:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
														"typeString": "contract IUmbraHookReceiver"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 1398,
												"src": "7916:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1379,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7916:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7833:105:7"
									},
									"returnParameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7948:0:7"
									},
									"scope": 1677,
									"src": "7804:241:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1445,
										"nodeType": "Block",
										"src": "8952:317:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1419,
															"name": "_stealthAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "8992:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1420,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1403,
															"src": "9012:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1421,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1405,
															"src": "9029:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1422,
															"name": "_sponsor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1407,
															"src": "9047:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1423,
															"name": "_sponsorFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1409,
															"src": "9063:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9101:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1424,
																"name": "IUmbraHookReceiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1096,
																"src": "9082:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUmbraHookReceiver_$1096_$",
																	"typeString": "type(contract IUmbraHookReceiver)"
																}
															},
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9082:21:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															}
														},
														{
															"hexValue": "",
															"id": 1427,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9111:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														},
														{
															"id": 1428,
															"name": "_v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1411,
															"src": "9121:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1429,
															"name": "_r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1413,
															"src": "9131:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1430,
															"name": "_s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1415,
															"src": "9141:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1418,
														"name": "_validateWithdrawSignature",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "8958:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_contract$_IUmbraHookReceiver_$1096_$_t_bytes_memory_ptr_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory,uint8,bytes32,bytes32) view"
														}
													},
													"id": 1431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8958:191:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1432,
												"nodeType": "ExpressionStatement",
												"src": "8958:191:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1434,
															"name": "_stealthAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1401,
															"src": "9178:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1435,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1403,
															"src": "9192:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1436,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1405,
															"src": "9203:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1437,
															"name": "_sponsor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1407,
															"src": "9215:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1438,
															"name": "_sponsorFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1409,
															"src": "9225:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1440,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9257:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1439,
																"name": "IUmbraHookReceiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1096,
																"src": "9238:18:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IUmbraHookReceiver_$1096_$",
																	"typeString": "type(contract IUmbraHookReceiver)"
																}
															},
															"id": 1441,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9238:21:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															}
														},
														{
															"hexValue": "",
															"id": 1442,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9261:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1433,
														"name": "_withdrawTokenInternal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1596,
														"src": "9155:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_contract$_IUmbraHookReceiver_$1096_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory)"
														}
													},
													"id": 1443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9155:109:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1444,
												"nodeType": "ExpressionStatement",
												"src": "9155:109:7"
											}
										]
									},
									"documentation": {
										"id": 1399,
										"nodeType": "StructuredDocumentation",
										"src": "8049:690:7",
										"text": " @notice Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization\n @param _stealthAddr The stealth address whose token balance will be withdrawn\n @param _acceptor Address where withdrawn funds should be sent\n @param _tokenAddr Address of the ERC20 token being withdrawn\n @param _sponsor Address which is compensated for submitting the withdrawal tx\n @param _sponsorFee Amount of the token to pay to the sponsor\n @param _v ECDSA signature component: Parity of the `y` coordinate of point `R`\n @param _r ECDSA signature component: x-coordinate of `R`\n @param _s ECDSA signature component: `s` value of the signature"
									},
									"functionSelector": "81ab0fcd",
									"id": 1446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawTokenOnBehalf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1401,
												"mutability": "mutable",
												"name": "_stealthAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8778:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8778:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "_acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8804:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8804:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8827:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8827:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "_sponsor",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8851:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1406,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8851:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "_sponsorFee",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8873:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8873:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "_v",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8898:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1410,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "8898:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "_r",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8912:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1412,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8912:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1415,
												"mutability": "mutable",
												"name": "_s",
												"nodeType": "VariableDeclaration",
												"scope": 1446,
												"src": "8928:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1414,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8928:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8772:170:7"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8952:0:7"
									},
									"scope": 1677,
									"src": "8742:527:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1493,
										"nodeType": "Block",
										"src": "10413:225:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1471,
															"name": "_stealthAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1449,
															"src": "10446:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1472,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1451,
															"src": "10460:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1473,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1453,
															"src": "10471:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1474,
															"name": "_sponsor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1455,
															"src": "10483:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1475,
															"name": "_sponsorFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1457,
															"src": "10493:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1476,
															"name": "_hook",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1459,
															"src": "10506:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															}
														},
														{
															"id": 1477,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1461,
															"src": "10513:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1478,
															"name": "_v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1463,
															"src": "10520:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1479,
															"name": "_r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1465,
															"src": "10524:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1480,
															"name": "_s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1467,
															"src": "10528:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1470,
														"name": "_validateWithdrawSignature",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "10419:26:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_contract$_IUmbraHookReceiver_$1096_$_t_bytes_memory_ptr_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
															"typeString": "function (address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory,uint8,bytes32,bytes32) view"
														}
													},
													"id": 1481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10419:112:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1482,
												"nodeType": "ExpressionStatement",
												"src": "10419:112:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1484,
															"name": "_stealthAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1449,
															"src": "10560:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1485,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1451,
															"src": "10574:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1486,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1453,
															"src": "10585:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1487,
															"name": "_sponsor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1455,
															"src": "10597:8:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1488,
															"name": "_sponsorFee",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1457,
															"src": "10607:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1489,
															"name": "_hook",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1459,
															"src": "10620:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															}
														},
														{
															"id": 1490,
															"name": "_data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1461,
															"src": "10627:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																"typeString": "contract IUmbraHookReceiver"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1483,
														"name": "_withdrawTokenInternal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1596,
														"src": "10537:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_contract$_IUmbraHookReceiver_$1096_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,address,address,uint256,contract IUmbraHookReceiver,bytes memory)"
														}
													},
													"id": 1491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10537:96:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1492,
												"nodeType": "ExpressionStatement",
												"src": "10537:96:7"
											}
										]
									},
									"documentation": {
										"id": 1447,
										"nodeType": "StructuredDocumentation",
										"src": "9273:866:7",
										"text": " @notice Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization\n @param _stealthAddr The stealth address whose token balance will be withdrawn\n @param _acceptor Address where withdrawn funds should be sent\n @param _tokenAddr Address of the ERC20 token being withdrawn\n @param _sponsor Address which is compensated for submitting the withdrawal tx\n @param _sponsorFee Amount of the token to pay to the sponsor\n @param _hook Contract that will be called after the token withdrawal has completed\n @param _data Arbitrary data that will be passed to the post-withdraw hook contract\n @param _v ECDSA signature component: Parity of the `y` coordinate of point `R`\n @param _r ECDSA signature component: x-coordinate of `R`\n @param _s ECDSA signature component: `s` value of the signature"
									},
									"functionSelector": "23d0e7a1",
									"id": 1494,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawTokenAndCallOnBehalf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1449,
												"mutability": "mutable",
												"name": "_stealthAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10185:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1448,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10185:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "_acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10211:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1450,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10211:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10234:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1452,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10234:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1455,
												"mutability": "mutable",
												"name": "_sponsor",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10258:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1454,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10258:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "_sponsorFee",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10280:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10280:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1459,
												"mutability": "mutable",
												"name": "_hook",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10305:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
													"typeString": "contract IUmbraHookReceiver"
												},
												"typeName": {
													"id": 1458,
													"name": "IUmbraHookReceiver",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1096,
													"src": "10305:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
														"typeString": "contract IUmbraHookReceiver"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10335:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1460,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "10335:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "_v",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10359:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1462,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "10359:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "_r",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10373:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1464,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10373:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1467,
												"mutability": "mutable",
												"name": "_s",
												"nodeType": "VariableDeclaration",
												"scope": 1494,
												"src": "10389:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1466,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10389:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10179:224:7"
									},
									"returnParameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10413:0:7"
									},
									"scope": 1677,
									"src": "10142:496:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1595,
										"nodeType": "Block",
										"src": "11504:735:7",
										"statements": [
											{
												"assignments": [
													1513
												],
												"declarations": [
													{
														"constant": false,
														"id": 1513,
														"mutability": "mutable",
														"name": "_amount",
														"nodeType": "VariableDeclaration",
														"scope": 1595,
														"src": "11510:15:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1512,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11510:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1519,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1514,
															"name": "tokenPayments",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1147,
															"src": "11528:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1516,
														"indexExpression": {
															"id": 1515,
															"name": "_stealthAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1497,
															"src": "11542:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "11528:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1518,
													"indexExpression": {
														"id": 1517,
														"name": "_tokenAddr",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1501,
														"src": "11556:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "11528:39:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11510:57:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1521,
																"name": "_amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1513,
																"src": "11618:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1522,
																"name": "_sponsorFee",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1505,
																"src": "11628:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11618:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556d6272613a204e6f2062616c616e636520746f207769746864726177206f722066656520657863656564732062616c616e6365",
															"id": 1524,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11641:54:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_328b8850d4c62d9ba870e891ed4b84c12bcfb70602a6a87db8f71bfe7c2b366f",
																"typeString": "literal_string \"Umbra: No balance to withdraw or fee exceeds balance\""
															},
															"value": "Umbra: No balance to withdraw or fee exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_328b8850d4c62d9ba870e891ed4b84c12bcfb70602a6a87db8f71bfe7c2b366f",
																"typeString": "literal_string \"Umbra: No balance to withdraw or fee exceeds balance\""
															}
														],
														"id": 1520,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11610:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11610:86:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1526,
												"nodeType": "ExpressionStatement",
												"src": "11610:86:7"
											},
											{
												"assignments": [
													1528
												],
												"declarations": [
													{
														"constant": false,
														"id": 1528,
														"mutability": "mutable",
														"name": "_withdrawalAmount",
														"nodeType": "VariableDeclaration",
														"scope": 1595,
														"src": "11703:25:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1527,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11703:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1532,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1531,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1529,
														"name": "_amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1513,
														"src": "11731:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1530,
														"name": "_sponsorFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1505,
														"src": "11741:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11731:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11703:49:7"
											},
											{
												"expression": {
													"id": 1538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "delete",
													"prefix": true,
													"src": "11758:46:7",
													"subExpression": {
														"baseExpression": {
															"baseExpression": {
																"id": 1533,
																"name": "tokenPayments",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1147,
																"src": "11765:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1535,
															"indexExpression": {
																"id": 1534,
																"name": "_stealthAddr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1497,
																"src": "11779:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11765:27:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1537,
														"indexExpression": {
															"id": 1536,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1501,
															"src": "11793:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11765:39:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1539,
												"nodeType": "ExpressionStatement",
												"src": "11758:46:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1541,
															"name": "_stealthAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1497,
															"src": "11831:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1542,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1499,
															"src": "11845:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1543,
															"name": "_withdrawalAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1528,
															"src": "11856:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1544,
															"name": "_tokenAddr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1501,
															"src": "11875:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1540,
														"name": "TokenWithdrawal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1127,
														"src": "11815:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,address,uint256,address)"
														}
													},
													"id": 1545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11815:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1546,
												"nodeType": "EmitStatement",
												"src": "11810:76:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1551,
																	"name": "_tokenAddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1501,
																	"src": "11923:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1550,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 542,
																"src": "11916:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$542_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11916:18:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1553,
															"name": "_acceptor",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1499,
															"src": "11936:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1554,
															"name": "_withdrawalAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1528,
															"src": "11947:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$542",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1547,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 755,
															"src": "11893:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$755_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1549,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 576,
														"src": "11893:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11893:72:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1556,
												"nodeType": "ExpressionStatement",
												"src": "11893:72:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1557,
														"name": "_sponsorFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1505,
														"src": "11976:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1558,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11990:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "11976:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1571,
												"nodeType": "IfStatement",
												"src": "11972:101:7",
												"trueBody": {
													"id": 1570,
													"nodeType": "Block",
													"src": "11993:80:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1564,
																				"name": "_tokenAddr",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1501,
																				"src": "12031:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1563,
																			"name": "IERC20",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 542,
																			"src": "12024:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC20_$542_$",
																				"typeString": "type(contract IERC20)"
																			}
																		},
																		"id": 1565,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12024:18:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$542",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 1566,
																		"name": "_sponsor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1503,
																		"src": "12044:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1567,
																		"name": "_sponsorFee",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1505,
																		"src": "12054:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$542",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1560,
																		"name": "SafeERC20",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 755,
																		"src": "12001:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_SafeERC20_$755_$",
																			"typeString": "type(library SafeERC20)"
																		}
																	},
																	"id": 1562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 576,
																	"src": "12001:22:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$542_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1568,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12001:65:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1569,
															"nodeType": "ExpressionStatement",
															"src": "12001:65:7"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1574,
																"name": "_hook",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1507,
																"src": "12091:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																	"typeString": "contract IUmbraHookReceiver"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																	"typeString": "contract IUmbraHookReceiver"
																}
															],
															"id": 1573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12083:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1572,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12083:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1575,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12083:14:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12109:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1577,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12101:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1576,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12101:7:7",
																"typeDescriptions": {}
															}
														},
														"id": 1579,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12101:10:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "12083:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1594,
												"nodeType": "IfStatement",
												"src": "12079:156:7",
												"trueBody": {
													"id": 1593,
													"nodeType": "Block",
													"src": "12113:122:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1584,
																		"name": "_withdrawalAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1528,
																		"src": "12143:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1585,
																		"name": "_stealthAddr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1497,
																		"src": "12162:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1586,
																		"name": "_acceptor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1499,
																		"src": "12176:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1587,
																		"name": "_tokenAddr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1501,
																		"src": "12187:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1588,
																		"name": "_sponsor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1503,
																		"src": "12199:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1589,
																		"name": "_sponsorFee",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1505,
																		"src": "12209:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1590,
																		"name": "_data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1509,
																		"src": "12222:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 1581,
																		"name": "_hook",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1507,
																		"src": "12121:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																			"typeString": "contract IUmbraHookReceiver"
																		}
																	},
																	"id": 1583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "tokensWithdrawn",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1095,
																	"src": "12121:21:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (uint256,address,address,address,address,uint256,bytes memory) external"
																	}
																},
																"id": 1591,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12121:107:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1592,
															"nodeType": "ExpressionStatement",
															"src": "12121:107:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1495,
										"nodeType": "StructuredDocumentation",
										"src": "10642:640:7",
										"text": " @notice Low level withdrawal function that should only be called after safety checks\n @param _stealthAddr The stealth address whose token balance will be withdrawn\n @param _acceptor Address where withdrawn funds should be sent\n @param _tokenAddr Address of the ERC20 token being withdrawn\n @param _sponsor Address which is compensated for submitting the withdrawal tx\n @param _sponsorFee Amount of the token to pay to the sponsor\n @param _hook Contract that will be called after the token withdrawal has completed\n @param _data Arbitrary data that will be passed to the post-withdraw hook contract"
									},
									"id": 1596,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdrawTokenInternal",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1497,
												"mutability": "mutable",
												"name": "_stealthAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1596,
												"src": "11322:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11322:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1499,
												"mutability": "mutable",
												"name": "_acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1596,
												"src": "11348:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1498,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11348:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1501,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1596,
												"src": "11371:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11371:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "_sponsor",
												"nodeType": "VariableDeclaration",
												"scope": 1596,
												"src": "11395:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11395:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "_sponsorFee",
												"nodeType": "VariableDeclaration",
												"scope": 1596,
												"src": "11417:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1504,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11417:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "_hook",
												"nodeType": "VariableDeclaration",
												"scope": 1596,
												"src": "11442:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
													"typeString": "contract IUmbraHookReceiver"
												},
												"typeName": {
													"id": 1506,
													"name": "IUmbraHookReceiver",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1096,
													"src": "11442:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
														"typeString": "contract IUmbraHookReceiver"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 1596,
												"src": "11472:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1508,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11472:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11316:178:7"
									},
									"returnParameters": {
										"id": 1511,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11504:0:7"
									},
									"scope": 1677,
									"src": "11285:954:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1675,
										"nodeType": "Block",
										"src": "13401:533:7",
										"statements": [
											{
												"assignments": [
													1621
												],
												"declarations": [
													{
														"constant": false,
														"id": 1621,
														"mutability": "mutable",
														"name": "_chainId",
														"nodeType": "VariableDeclaration",
														"scope": 1675,
														"src": "13407:16:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1620,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13407:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1622,
												"nodeType": "VariableDeclarationStatement",
												"src": "13407:16:7"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "13438:35:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13446:21:7",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "chainid",
																	"nodeType": "YulIdentifier",
																	"src": "13458:7:7"
																},
																"nodeType": "YulFunctionCall",
																"src": "13458:9:7"
															},
															"variableNames": [
																{
																	"name": "_chainId",
																	"nodeType": "YulIdentifier",
																	"src": "13446:8:7"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 1621,
														"isOffset": false,
														"isSlot": false,
														"src": "13446:8:7",
														"valueSize": 1
													}
												],
												"id": 1623,
												"nodeType": "InlineAssembly",
												"src": "13429:44:7"
											},
											{
												"assignments": [
													1625
												],
												"declarations": [
													{
														"constant": false,
														"id": 1625,
														"mutability": "mutable",
														"name": "_digest",
														"nodeType": "VariableDeclaration",
														"scope": 1675,
														"src": "13479:15:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1624,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "13479:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1651,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																	"id": 1629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13550:34:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n32"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1633,
																					"name": "_chainId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1621,
																					"src": "13630:8:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"arguments": [
																						{
																							"id": 1636,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "13648:4:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_Umbra_$1677",
																								"typeString": "contract Umbra"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_Umbra_$1677",
																								"typeString": "contract Umbra"
																							}
																						],
																						"id": 1635,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "13640:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 1634,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "13640:7:7",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1637,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "13640:13:7",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1638,
																					"name": "_acceptor",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1601,
																					"src": "13655:9:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1639,
																					"name": "_tokenAddr",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1603,
																					"src": "13666:10:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1640,
																					"name": "_sponsor",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1605,
																					"src": "13678:8:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1641,
																					"name": "_sponsorFee",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1607,
																					"src": "13688:11:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"arguments": [
																						{
																							"id": 1644,
																							"name": "_hook",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1609,
																							"src": "13709:5:7",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																								"typeString": "contract IUmbraHookReceiver"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
																								"typeString": "contract IUmbraHookReceiver"
																							}
																						],
																						"id": 1643,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "13701:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 1642,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "13701:7:7",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1645,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "13701:14:7",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1646,
																					"name": "_data",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1611,
																					"src": "13717:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				],
																				"expression": {
																					"id": 1631,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "13619:3:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1632,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberName": "encode",
																				"nodeType": "MemberAccess",
																				"src": "13619:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 1647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "13619:104:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1630,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "13596:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1648,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13596:139:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1627,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "13522:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1628,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "13522:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1649,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13522:223:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1626,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "13503:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13503:250:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13479:274:7"
											},
											{
												"assignments": [
													1653
												],
												"declarations": [
													{
														"constant": false,
														"id": 1653,
														"mutability": "mutable",
														"name": "_recoveredAddress",
														"nodeType": "VariableDeclaration",
														"scope": 1675,
														"src": "13760:25:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1652,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "13760:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1660,
												"initialValue": {
													"arguments": [
														{
															"id": 1655,
															"name": "_digest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1625,
															"src": "13798:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1656,
															"name": "_v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1613,
															"src": "13807:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1657,
															"name": "_r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1615,
															"src": "13811:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1658,
															"name": "_s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1617,
															"src": "13815:2:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1654,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "13788:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13788:30:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13760:58:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1671,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1662,
																	"name": "_recoveredAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1653,
																	"src": "13832:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 1665,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13861:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 1664,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "13853:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1663,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "13853:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1666,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13853:10:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"src": "13832:31:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 1670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1668,
																	"name": "_recoveredAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1653,
																	"src": "13867:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 1669,
																	"name": "_stealthAddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1599,
																	"src": "13888:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "13867:33:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "13832:68:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556d6272613a20496e76616c6964205369676e6174757265",
															"id": 1672,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13902:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3207472a4412f1865c397581727e90833286118d718aa9dece3139aa9936bbd6",
																"typeString": "literal_string \"Umbra: Invalid Signature\""
															},
															"value": "Umbra: Invalid Signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3207472a4412f1865c397581727e90833286118d718aa9dece3139aa9936bbd6",
																"typeString": "literal_string \"Umbra: Invalid Signature\""
															}
														],
														"id": 1661,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13824:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13824:105:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1674,
												"nodeType": "ExpressionStatement",
												"src": "13824:105:7"
											}
										]
									},
									"documentation": {
										"id": 1597,
										"nodeType": "StructuredDocumentation",
										"src": "12243:881:7",
										"text": " @notice Internal method which recovers address from signature of the parameters and throws if not _stealthAddr\n @param _stealthAddr The stealth address whose token balance will be withdrawn\n @param _acceptor Address where withdrawn funds should be sent\n @param _tokenAddr Address of the ERC20 token being withdrawn\n @param _sponsor Address which is compensated for submitting the withdrawal tx\n @param _sponsorFee Amount of the token to pay to the sponsor\n @param _hook Contract that will be called after the token withdrawal has completed\n @param _data Arbitrary data that will be passed to the post-withdraw hook contract\n @param _v ECDSA signature component: Parity of the `y` coordinate of point `R`\n @param _r ECDSA signature component: x-coordinate of `R`\n @param _s ECDSA signature component: `s` value of the signature"
									},
									"id": 1676,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_validateWithdrawSignature",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1599,
												"mutability": "mutable",
												"name": "_stealthAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13168:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1598,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13168:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1601,
												"mutability": "mutable",
												"name": "_acceptor",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13194:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1600,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13194:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1603,
												"mutability": "mutable",
												"name": "_tokenAddr",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13217:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1602,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13217:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "_sponsor",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13241:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13241:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "_sponsorFee",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13263:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13263:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1609,
												"mutability": "mutable",
												"name": "_hook",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13288:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
													"typeString": "contract IUmbraHookReceiver"
												},
												"typeName": {
													"id": 1608,
													"name": "IUmbraHookReceiver",
													"nodeType": "UserDefinedTypeName",
													"referencedDeclaration": 1096,
													"src": "13288:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IUmbraHookReceiver_$1096",
														"typeString": "contract IUmbraHookReceiver"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1611,
												"mutability": "mutable",
												"name": "_data",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13318:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1610,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13318:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "_v",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13342:8:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1612,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "13342:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "_r",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13356:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1614,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "_s",
												"nodeType": "VariableDeclaration",
												"scope": 1676,
												"src": "13372:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1616,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13372:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13162:224:7"
									},
									"returnParameters": {
										"id": 1619,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13401:0:7"
									},
									"scope": 1677,
									"src": "13127:807:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1678,
							"src": "1500:12436:7"
						}
					],
					"src": "1304:12633:7"
				},
				"id": 7
			}
		}
	}
}