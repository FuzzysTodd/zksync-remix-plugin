{
	"compiler": {
		"version": "0.7.6+commit.7338295f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_toll",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_tollCollector",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "_tollReceiver",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "pkx",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "ciphertext",
						"type": "bytes32"
					}
				],
				"name": "Announcement",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "receiver",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "acceptor",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "TokenWithdrawal",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "collectTolls",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_receiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tollCommitment",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_pkx",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_ciphertext",
						"type": "bytes32"
					}
				],
				"name": "sendEth",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_receiver",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddr",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "_pkx",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_ciphertext",
						"type": "bytes32"
					}
				],
				"name": "sendToken",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_newToll",
						"type": "uint256"
					}
				],
				"name": "setToll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newTollCollector",
						"type": "address"
					}
				],
				"name": "setTollCollector",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "_newTollReceiver",
						"type": "address"
					}
				],
				"name": "setTollReceiver",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "tokenPayments",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "toll",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tollCollector",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tollReceiver",
				"outputs": [
					{
						"internalType": "address payable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_acceptor",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddr",
						"type": "address"
					}
				],
				"name": "withdrawToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_acceptor",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddr",
						"type": "address"
					},
					{
						"internalType": "contract IUmbraHookReceiver",
						"name": "_hook",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "withdrawTokenAndCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stealthAddr",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_acceptor",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddr",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_sponsor",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_sponsorFee",
						"type": "uint256"
					},
					{
						"internalType": "contract IUmbraHookReceiver",
						"name": "_hook",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					},
					{
						"internalType": "uint8",
						"name": "_v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "_r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_s",
						"type": "bytes32"
					}
				],
				"name": "withdrawTokenAndCallOnBehalf",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stealthAddr",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_acceptor",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_tokenAddr",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_sponsor",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_sponsorFee",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "_r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "_s",
						"type": "bytes32"
					}
				],
				"name": "withdrawTokenOnBehalf",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_toll": "Amount of ETH required per send",
						"_tollCollector": "Address that can sweep collected funds",
						"_tollReceiver": "Address that receives collected funds"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"sendEth(address,uint256,bytes32,bytes32)": {
					"params": {
						"_ciphertext": "Encrypted entropy (used to generated the stealth address) and payload extension",
						"_pkx": "X-coordinate of the ephemeral public key used to encrypt the payload",
						"_receiver": "Stealth address receiving the payment",
						"_tollCommitment": "Exact toll the sender is paying; should equal contract toll; the committment is used to prevent frontrunning attacks by the owner; see https://github.com/ScopeLift/umbra-protocol/issues/54 for more information"
					}
				},
				"sendToken(address,address,uint256,bytes32,bytes32)": {
					"params": {
						"_amount": "Amount of the token to send, in its own base units",
						"_ciphertext": "Encrypted entropy (used to generated the stealth address) and payload extension",
						"_pkx": "X-coordinate of the ephemeral public key used to encrypt the payload",
						"_receiver": "Stealth address receiving the payment",
						"_tokenAddr": "Address of the ERC20 token being sent"
					}
				},
				"setToll(uint256)": {
					"params": {
						"_newToll": "New ETH toll in wei"
					}
				},
				"setTollCollector(address)": {
					"params": {
						"_newTollCollector": "New address which has fund sweeping privileges"
					}
				},
				"setTollReceiver(address)": {
					"params": {
						"_newTollReceiver": "New address which receives collected funds"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"withdrawToken(address,address)": {
					"details": "This method must be directly called by the stealth address",
					"params": {
						"_acceptor": "Address where withdrawn funds should be sent",
						"_tokenAddr": "Address of the ERC20 token being withdrawn"
					}
				},
				"withdrawTokenAndCall(address,address,address,bytes)": {
					"details": "This method must be directly called by the stealth address",
					"params": {
						"_acceptor": "Address where withdrawn funds should be sent",
						"_data": "Arbitrary data that will be passed to the post-withdraw hook contract",
						"_hook": "Contract that will be called after the token withdrawal has completed",
						"_tokenAddr": "Address of the ERC20 token being withdrawn"
					}
				},
				"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)": {
					"params": {
						"_acceptor": "Address where withdrawn funds should be sent",
						"_data": "Arbitrary data that will be passed to the post-withdraw hook contract",
						"_hook": "Contract that will be called after the token withdrawal has completed",
						"_r": "ECDSA signature component: x-coordinate of `R`",
						"_s": "ECDSA signature component: `s` value of the signature",
						"_sponsor": "Address which is compensated for submitting the withdrawal tx",
						"_sponsorFee": "Amount of the token to pay to the sponsor",
						"_stealthAddr": "The stealth address whose token balance will be withdrawn",
						"_tokenAddr": "Address of the ERC20 token being withdrawn",
						"_v": "ECDSA signature component: Parity of the `y` coordinate of point `R`"
					}
				},
				"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)": {
					"params": {
						"_acceptor": "Address where withdrawn funds should be sent",
						"_r": "ECDSA signature component: x-coordinate of `R`",
						"_s": "ECDSA signature component: `s` value of the signature",
						"_sponsor": "Address which is compensated for submitting the withdrawal tx",
						"_sponsorFee": "Amount of the token to pay to the sponsor",
						"_stealthAddr": "The stealth address whose token balance will be withdrawn",
						"_tokenAddr": "Address of the ERC20 token being withdrawn",
						"_v": "ECDSA signature component: Parity of the `y` coordinate of point `R`"
					}
				}
			},
			"stateVariables": {
				"ETH_TOKEN_PLACHOLDER": {
					"details": "Placeholder address used to identify transfer of native ETH"
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"Announcement(address,uint256,address,bytes32,bytes32)": {
					"notice": "Emitted when a payment is sent"
				},
				"TokenWithdrawal(address,address,uint256,address)": {
					"notice": "Emitted when a token is withdrawn"
				}
			},
			"kind": "user",
			"methods": {
				"collectTolls()": {
					"notice": "Function only the toll collector can call to sweep funds to the toll receiver"
				},
				"sendEth(address,uint256,bytes32,bytes32)": {
					"notice": "Send and announce ETH payment to a stealth address"
				},
				"sendToken(address,address,uint256,bytes32,bytes32)": {
					"notice": "Send and announce an ERC20 payment to a stealth address"
				},
				"setToll(uint256)": {
					"notice": "Admin only function to update the toll"
				},
				"setTollCollector(address)": {
					"notice": "Admin only function to update the toll collector"
				},
				"setTollReceiver(address)": {
					"notice": "Admin only function to update the toll receiver"
				},
				"tokenPayments(address,address)": {
					"notice": "Token payments pending withdrawal; stealth address => token address => amount"
				},
				"toll()": {
					"notice": "An ETH amount that must be sent alongside each payment; used as an anti-spam measure"
				},
				"tollCollector()": {
					"notice": "A privileged address, set by the admin, that can sweep all collected ETH tolls"
				},
				"tollReceiver()": {
					"notice": "The address where ETH funds are sent when collected by the tollCollector"
				},
				"withdrawToken(address,address)": {
					"notice": "Withdraw an ERC20 token payment sent to a stealth address"
				},
				"withdrawTokenAndCall(address,address,address,bytes)": {
					"notice": "Withdraw an ERC20 token payment sent to a stealth address"
				},
				"withdrawTokenAndCallOnBehalf(address,address,address,address,uint256,address,bytes,uint8,bytes32,bytes32)": {
					"notice": "Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization"
				},
				"withdrawTokenOnBehalf(address,address,address,address,uint256,uint8,bytes32,bytes32)": {
					"notice": "Withdraw an ERC20 token payment on behalf of a stealth address via signed authorization"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Umbra-Cash/contracts/Umbra.sol": "Umbra"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Umbra-Cash/@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x089197413eb3c21043b9d41d9673750ee2e5a30d80329c0f64de3f18e28adc74",
			"license": "MIT",
			"urls": [
				"bzz-raw://82f9ae19cf96921184346db1997d5fcc14860d69427eff0e2d34fd8fdd6003ab",
				"dweb:/ipfs/QmXTPWQzemS7Eb8ehFfNyGHDDxaDtujXoPhVkED4ASzpTF"
			]
		},
		"Umbra-Cash/@openzeppelin/contracts/math/SafeMath.sol": {
			"keccak256": "0xed84f952d9565c4fc3690a3c7f295ae401f14d3e952ef104ef991f272127b5dc",
			"license": "MIT",
			"urls": [
				"bzz-raw://54f04c5b3bad1b034e0164b453b326fdddbb067664c2255d79b266bccff3b7d7",
				"dweb:/ipfs/Qmb83oMdU7UtMZ8YbnxmP8CDc8rgQFzWQDN3uoAwPDyRRQ"
			]
		},
		"Umbra-Cash/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x702e70ef0f67b8a45db9bdccdbe3eb1de654d4c8c93503df15784d0964046ff6",
			"license": "MIT",
			"urls": [
				"bzz-raw://e852c6eddd2a3889f99be4b591be57177d2a00bb0c2e0585f2af8e96b7e480fc",
				"dweb:/ipfs/QmRSosgbTfUYW7g3mA6Sy8ydsMGQRWKypWxbqLPe5UgjAN"
			]
		},
		"Umbra-Cash/@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
			"keccak256": "0x88c47dd07640b0c558afd43ab1003cb600f087dbecdac2869315ccab26170e4e",
			"license": "MIT",
			"urls": [
				"bzz-raw://ed3e6e96547fa60a297b3166919e247242969da0c906482baec9d9130f438e60",
				"dweb:/ipfs/QmQ7SD1Hoc7eNtsrgSb7FFjdNM4WgVyThzXUT4uQ8S7QbZ"
			]
		},
		"Umbra-Cash/@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0x2ca24a00c51df6788692e84c47dd1c4d59f78dd74bf34a53a648739e10f1cbff",
			"license": "MIT",
			"urls": [
				"bzz-raw://988aeb7ea692f2092505048dfa69d67d17ab305574d90e7ff1994417c954e1a2",
				"dweb:/ipfs/QmXAP6thCWwKu1sG7YzLDcLqXinNpQejpzTAB5bJPuzwnG"
			]
		},
		"Umbra-Cash/@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x0e92b627582fd191d8db7901cba59e29b57059716e53b5034ef8977357c3244a",
			"license": "MIT",
			"urls": [
				"bzz-raw://54c37e6816bd5730227bcb2553dd74d9ed0d4b513485375d644061bc98d3d08e",
				"dweb:/ipfs/QmQ67ZbMnJovZCpgtPbfPQms1ZfWHD5mkaEiy6YrnQvCLD"
			]
		},
		"Umbra-Cash/contracts/IUmbraHookReceiver.sol": {
			"keccak256": "0x6bc3a87d2729ee3ecbd67c304a8d8ef7f6389260671a2300af791cc225869f71",
			"license": "MIT",
			"urls": [
				"bzz-raw://317b0cfc37c221d9d3417165bb1af86ef9bb905333738cc327b4faf639dead2e",
				"dweb:/ipfs/QmeiRRRtwgUYhsi8FrMmG2qyNm2Lr2cjYeTL2sxFChtRMC"
			]
		},
		"Umbra-Cash/contracts/Umbra.sol": {
			"keccak256": "0xc057fac05cd46c7d4e7a08459f35019a0b2f376bd257bd0a57b22c2d6b1542fa",
			"license": "MIT",
			"urls": [
				"bzz-raw://091cca2cd071c80d8dafa48fa0ef8de3fb895b2a54f3102821acbad2f3f784d7",
				"dweb:/ipfs/QmQbzpw8LAWoPWf8R8eHYphXdjyvM54oYrLMhPcK6MTbRy"
			]
		}
	},
	"version": 1
}